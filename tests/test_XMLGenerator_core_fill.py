# coding: utf-8

# IMPORTS
import filecmp
import os
import sys
import inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)
import XMLGenerator_Bandlist_core


# FUNCTIONS
def file_save(str_to_upload):
    file_name = f"bandlist.xml"
    if file_name:
        with open(file_name, 'wb') as file_output:
            file_output.write(str_to_upload)


# TESTS: XML_filler
# Bandlist Absorption & Raman: general info
def test_fill_bandlist_general():
    # absorption
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/bandlist_general.xlsx", "ABS")
    file_save(verf_result[0])
    assert verf_result[1] == "BANDLIST_ABS_A17"
    # <!-- BANDLIST IMPORT MODE AND INDEXES -->
    assert "<import_mode>first import</import_mode>" in str(verf_result[0])
    assert "<uid>BANDLIST_ABS_A17</uid>" in str(verf_result[0])
    # <!-- BANDLIST DESCRIPTION -->
    assert "<type>absorption</type>" in str(verf_result[0])
    assert "<title>C5</title>" in str(verf_result[0])
    assert "<description>C6</description>" in str(verf_result[0])
    # <!-- BANDLIST: SPECTRAL RANGES -->
    assert "<unit>cm-1</unit>" in str(verf_result[0])
    assert "<standard>unknown</standard>" in str(verf_result[0])
    assert "<type>FIR</type>" in str(verf_result[0])
    assert "<type>MIR</type>" in str(verf_result[0])
    assert "<type>soft X</type>" in str(verf_result[0])
    assert "<type>hard X</type>" in str(verf_result[0])
    assert "<type>UV</type>" in str(verf_result[0])
    assert "<type>mm</type>" in str(verf_result[0])
    assert "<min>50</min>" in str(verf_result[0])
    assert "<min>333</min>" in str(verf_result[0])
    assert "<min>555</min>" in str(verf_result[0])
    assert "<min>777</min>" in str(verf_result[0])
    assert "<max>4600</max>" in str(verf_result[0])
    assert "<max>444</max>" in str(verf_result[0])
    assert "<max>666</max>" in str(verf_result[0])
    assert "<max>888</max>" in str(verf_result[0])
    assert "<comments>F34</comments>" in str(verf_result[0])
    # <!-- BANDLIST: INTENSITY MODES AND UNITS -->
    assert "<electronic>111</electronic>" in str(verf_result[0])
    assert "<infrared>222</infrared>" in str(verf_result[0])
    # <!-- BANDLIST: CONSTITUENT AND SPECIE -->
    assert "<uid>CONST_B17</uid>" in str(verf_result[0])
    assert "<primary_specie_uid>C17</primary_specie_uid>" in str(verf_result[0])
    assert "<comments>D17</comments>" in str(verf_result[0])
    # <!-- BANDLIST: HISTORY AND VERSION -->
    assert "<status>partly invalidated version</status>" in str(verf_result[0])
    assert "<comments>C53</comments>" in str(verf_result[0])
    assert "<history>A53</history>" in str(verf_result[0])
    # <!-- BANDLIST: PARENT SPECTRA -->
    assert "<uid>EXPERIMENT_A25</uid>" in str(verf_result[0])
    assert "<uid>EXPERIMENT_A26</uid>" in str(verf_result[0])
    assert "<uid>EXPERIMENT_A27</uid>" in str(verf_result[0])
    assert "<uid>EXPERIMENT_A28</uid>" in str(verf_result[0])
    assert "<uid>SPECTRUM_B25</uid>" in str(verf_result[0])
    assert "<uid>SPECTRUM_B26</uid>" in str(verf_result[0])
    assert "<uid>SPECTRUM_B27</uid>" in str(verf_result[0])
    assert "<uid>SPECTRUM_B28</uid>" in str(verf_result[0])
    assert "<parent_spectra_comments>C25</parent_spectra_comments>" in str(verf_result[0])
    # <!-- BANDLIST: ANALYSIS AND VALIDATION -->
    assert "<analysis>C7</analysis>" in str(verf_result[0])
    assert "<comments>C8</comments>" in str(verf_result[0])
    assert "<quality_flag>5</quality_flag>" in str(verf_result[0])
    assert "<date_validated>2021-08-16</date_validated>" in str(verf_result[0])
    assert "<experimentalist_uid>EXPER_Bernard_Schmitt</experimentalist_uid>" in str(verf_result[0])
    assert "<experimentalist_uid>EXPER_B_S</experimentalist_uid>" in str(verf_result[0])
    assert "<experimentalist_uid>EXPER_B_F</experimentalist_uid>" in str(verf_result[0])
    assert "<experimentalist_uid>EXPER_F_B</experimentalist_uid>" in str(verf_result[0])
    # <!-- BANDLIST: DOCUMENTATIONS -->
    assert "<name>C9</name>" in str(verf_result[0])
    assert "<name>C10</name>" in str(verf_result[0])
    assert "<name>C11</name>" in str(verf_result[0])
    assert "<filename>E9</filename>" in str(verf_result[0])
    assert "<filename>E10</filename>" in str(verf_result[0])
    assert "<filename>E11</filename>" in str(verf_result[0])
    # <!-- BANDLIST: FILES -->
    assert "<original_data_filename>bandlist_general.xlsx</original_data_filename>" in str(verf_result[0])
    assert "<export_filename>C13</export_filename>" in str(verf_result[0])
    # <!-- BANDLIST: PREVIEW -->
    assert '<x axis="lin" unit="cm-1" min="0" max="4700"></x>' in str(verf_result[0])
    assert '<y axis="log" unit="cm-1" min="11" max="999"></y>' in str(verf_result[0])
    assert '<yrel axis="lin" min="12" max="457"></yrel>' in str(verf_result[0])
    assert '<type>relative</type>' in str(verf_result[0])
    assert '<filename>B60</filename>' in str(verf_result[0])
    # Raman
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/bandlist_general.xlsx", "RAMAN")
    file_save(verf_result[0])
    assert verf_result[1] == "BANDLIST_RAMAN_A17"
    # <!-- BANDLIST IMPORT MODE AND INDEXES -->
    assert "<import_mode>first import</import_mode>" in str(verf_result[0])
    assert "<uid>BANDLIST_RAMAN_A17</uid>" in str(verf_result[0])
    # <!-- BANDLIST DESCRIPTION -->
    assert "<type>Raman scattering</type>" in str(verf_result[0])
    assert "<title>C5</title>" in str(verf_result[0])
    assert "<description>C6</description>" in str(verf_result[0])
    # <!-- BANDLIST: SPECTRAL RANGES -->
    assert "<unit>cm-1</unit>" in str(verf_result[0])
    assert "<standard>vacuum</standard>" in str(verf_result[0])
    assert "<type>FIR</type>" in str(verf_result[0])
    assert "<type>MIR</type>" in str(verf_result[0])
    assert "<min>150</min>" in str(verf_result[0])
    assert "<min>13</min>" in str(verf_result[0])
    assert "<max>3200</max>" in str(verf_result[0])
    assert "<max>5055</max>" in str(verf_result[0])
    assert "<comments>F34</comments>" in str(verf_result[0])
    # <!-- BANDLIST: INTENSITY MODES AND UNITS -->
    assert "<electronic>111</electronic>" in str(verf_result[0])
    assert "<infrared>3203</infrared>" in str(verf_result[0])
    # <!-- BANDLIST: CONSTITUENT AND SPECIE -->
    assert "<uid>CONST_B17</uid>" in str(verf_result[0])
    assert "<primary_specie_uid>C17</primary_specie_uid>" in str(verf_result[0])
    assert "<comments>D17</comments>" in str(verf_result[0])
    # <!-- BANDLIST: HISTORY AND VERSION -->
    assert "<status>obsolete version</status>" in str(verf_result[0])
    assert "<comments>C53</comments>" in str(verf_result[0])
    assert "<history>A53</history>" in str(verf_result[0])
    # <!-- BANDLIST: PARENT SPECTRA -->
    assert "<uid>EXPERIMENT_A26</uid>" in str(verf_result[0])
    assert "<uid>EXPERIMENT_A27</uid>" in str(verf_result[0])
    assert "<uid>EXPERIMENT_A28</uid>" in str(verf_result[0])
    assert "<uid>SPECTRUM_B25</uid>" in str(verf_result[0])
    assert "<uid>SPECTRUM_B26</uid>" in str(verf_result[0])
    assert "<uid>SPECTRUM_B28</uid>" in str(verf_result[0])
    assert "<parent_spectra_comments>C25</parent_spectra_comments>" in str(verf_result[0])
    # <!-- BANDLIST: ANALYSIS AND VALIDATION -->
    assert "<analysis>C7</analysis>" in str(verf_result[0])
    assert "<comments>C8</comments>" in str(verf_result[0])
    assert "<quality_flag>3</quality_flag>" in str(verf_result[0])
    assert "<date_validated>2021-08-14</date_validated>" in str(verf_result[0])
    assert "<experimentalist_uid>EXPER_Bernard_Schmitt</experimentalist_uid>" in str(verf_result[0])
    # <!-- BANDLIST: DOCUMENTATIONS -->
    assert "<name>C10</name>" in str(verf_result[0])
    assert "<name>C11</name>" in str(verf_result[0])
    assert "<filename>E9</filename>" in str(verf_result[0])
    assert "<filename>E10</filename>" in str(verf_result[0])
    # <!-- BANDLIST: FILES -->
    assert "<original_data_filename>bandlist_general.xlsx</original_data_filename>" in str(verf_result[0])
    assert "<export_filename>C13</export_filename>" in str(verf_result[0])
    # <!-- BANDLIST: PREVIEW -->
    assert '<x axis="lin" unit="cm-1" min="0" max="3300"></x>' in str(verf_result[0])
    assert '<y axis="log" unit="cm-1" min="1" max="5550"></y>' in str(verf_result[0])
    assert '<yrel axis="" min="" max=""></yrel>' in str(verf_result[0])
    assert '<type>abscoef</type>' in str(verf_result[0])
    assert '<filename>B60</filename>' in str(verf_result[0])


# Bandlist Absorption & Raman: structure
def test_fill_bandlist_structure():
    # absorption
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/bandlist_structure.xlsx", "ABS")
    file_save(verf_result[0])
    # <!-- BANDLIST: STRUCTURE -->
    # Section 1
    assert '<sections variable_parameter="band transition category">' in str(verf_result[0])
    assert '<title>B67</title>' in str(verf_result[0])
    assert '<description>B68</description>' in str(verf_result[0])
    assert '<subsections variable_parameter="other">' in str(verf_result[0])
    # Section 1 Susection 1
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_D76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 2
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_E76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 3
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_F76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 4
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_G76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 5
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_H76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 6
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_I76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 7
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_J76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 8
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_K76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 9
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_L76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 10
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_M76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 11
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_N76</band_uid>' in str(verf_result[0])
    # Section 2
    assert '<title>B79</title>' in str(verf_result[0])
    assert '<description>B80</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B81</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B82</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B83</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B84</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B85</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B86</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B87</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B88</band_uid>' in str(verf_result[0])
    # Section 3
    assert '<title>B93</title>' in str(verf_result[0])
    assert '<description>B94</description>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B95</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B96</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B97</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B98</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B99</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B100</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B101</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_ABS_HC3N_HC3N-I_B102</band_uid>' in str(verf_result[0])
    # qtys
    assert str(verf_result[0]).count("<section>") == 3
    assert str(verf_result[0]).count("<subsection>") == 11
    assert str(verf_result[0]).count("<bands>") == 14
    # Raman
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/bandlist_structure.xlsx", "RAMAN")
    file_save(verf_result[0])
    # <!-- BANDLIST: STRUCTURE -->
    # Section 1
    assert '<sections variable_parameter="band transition category">' in str(verf_result[0])
    assert '<title>B67</title>' in str(verf_result[0])
    assert '<description>B68</description>' in str(verf_result[0])
    assert '<subsections variable_parameter="other">' in str(verf_result[0])
    # Section 1 Susection 1
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_D76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 2
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_E76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 3
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_F76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 4
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_G76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 5
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_H76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 6
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_I76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 7
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_J76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 8
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_K76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 9
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_L76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 10
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_M76</band_uid>' in str(verf_result[0])
    # Section 1 Susection 11
    assert '<title>D67</title>' in str(verf_result[0])
    assert '<description>D68</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N69</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N70</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N71</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N72</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N73</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N74</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N75</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_N76</band_uid>' in str(verf_result[0])
    # Section 2
    assert '<title>B79</title>' in str(verf_result[0])
    assert '<description>B80</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B81</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B82</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B83</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B84</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B85</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B86</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B87</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B88</band_uid>' in str(verf_result[0])
    # Section 3
    assert '<title>B93</title>' in str(verf_result[0])
    assert '<description>B94</description>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B95</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B96</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B97</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B98</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B99</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B100</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B101</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_RAMAN_HC3N_HC3N-I_B102</band_uid>' in str(verf_result[0])
    # qtys
    assert str(verf_result[0]).count("<section>") == 3
    assert str(verf_result[0]).count("<subsection>") == 11
    assert str(verf_result[0]).count("<bands>") == 14


# Band general info
def test_fill_band_general():
    # Raman
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_general.xlsx", "RAMAN")
    file_save(verf_result[0])
    # Band 1
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>first import</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_94</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E21</comments>' in str(verf_result[0])
    # Band 2
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>inherited</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_106</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E29</comments>' in str(verf_result[0])
    # Band 3
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>no change</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_506</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E43</comments>' in str(verf_result[0])
    # Band 4
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>correction</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_228</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E36</comments>' in str(verf_result[0])
    # Band 5
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>new version</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_999</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E61</comments>' in str(verf_result[0])
    # Band 5
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>invalidate</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_1111</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E70</comments>' in str(verf_result[0])
    # NOT ADDED
    # band 5 for XLSX
    assert '<import_mode>ignore</import_mode>' not in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_760</uid>' not in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E49</comments>' not in str(verf_result[0])
    # band 7 for XLSX
    assert '<import_mode>draft</import_mode>' not in str(verf_result[0])
    assert '<uid>BAND_RAMAN_HC3N_HC3N-I_883</uid>' not in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E55</comments>' not in str(verf_result[0])
    # qtys
    assert str(verf_result[0]).count("<import_mode>") == 7
    assert str(verf_result[0]).count("<band>") == 6
    # Abs
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_general.xlsx", "ABS")
    file_save(verf_result[0])
    # Band 1
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>first import</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_94</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E21</comments>' in str(verf_result[0])
    # Band 2
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>inherited</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_106</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E29</comments>' in str(verf_result[0])
    # Band 3
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>no change</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_506</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E43</comments>' in str(verf_result[0])
    # Band 4
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>correction</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_228</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E36</comments>' in str(verf_result[0])
    # Band 5
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>new version</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_999</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E61</comments>' in str(verf_result[0])
    # Band 5
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>invalidate</import_mode>' in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_1111</uid>' in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E70</comments>' in str(verf_result[0])
    # NOT ADDED
    # band 5 for XLSX
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>ignore</import_mode>' not in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_760</uid>' not in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E49</comments>' not in str(verf_result[0])
    # band 7 for XLSX
    # <!-- BAND: IMPORT MODE AND INDEXES -->
    assert '<import_mode>draft</import_mode>' not in str(verf_result[0])
    assert '<uid>BAND_ABS_HC3N_HC3N-I_883</uid>' not in str(verf_result[0])
    # <!-- BAND: COMMENTS -->
    assert '<comments>E55</comments>' not in str(verf_result[0])
    # qtys
    assert str(verf_result[0]).count("<import_mode>") == 7
    assert str(verf_result[0]).count("<band>") == 6


# Band Assignment
def test_fill_band_assignment():
    # Raman
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_assignment_ram.xlsx", "RAMAN")
    file_save(verf_result[0])
    # <!-- BAND: TRANSITION ASSIGNMENTS AND MODES -->
    # <number>
    # Band 1
    assert '<number>1</number>' in str(verf_result[0])
    assert '<number>2</number>' in str(verf_result[0])
    assert '<number>3</number>' in str(verf_result[0])
    # Band 2
    assert '<number>1</number>' in str(verf_result[0])
    assert '<number>2</number>' in str(verf_result[0])
    assert '<number>3</number>' in str(verf_result[0])
    assert '<number>4</number>' in str(verf_result[0])
    # Band 3
    assert '<number>1</number>' in str(verf_result[0])
    # <label>
    # Band 1
    assert '<label>I15</label>' in str(verf_result[0])
    assert '<label>I27</label>' in str(verf_result[0])
    assert '<label>I21</label>' in str(verf_result[0])
    # Band 2
    assert '<label>I51</label>' in str(verf_result[0])
    assert '<label>I45</label>' in str(verf_result[0])
    assert '<label>I39</label>' in str(verf_result[0])
    assert '<label>I33</label>' in str(verf_result[0])
    # Band 3
    assert '<label>I57</label>' in str(verf_result[0])
    # symmetry_label
    # Band 1
    assert '<symmetry_label>E</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>E1</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>unknown</symmetry_label>' in str(verf_result[0])
    # Band 2
    assert '<symmetry_label>Au</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>A</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>NULL</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>Ag</symmetry_label>' in str(verf_result[0])
    # Band 3
    assert '<symmetry_label>A2g</symmetry_label>' in str(verf_result[0])
    # category
    # Band 1
    assert '<category>electronic transition</category>' in str(verf_result[0])
    assert '<category>rotation</category>' in str(verf_result[0])
    assert '<category>overtone vibration</category>' in str(verf_result[0])
    # Band 2
    assert '<category>combination</category>' in str(verf_result[0])
    assert '<category>overtone rotation</category>' in str(verf_result[0])
    assert '<category>unknown</category>' in str(verf_result[0])
    assert '<category>other</category>' in str(verf_result[0])
    # Band 3
    assert '<category>phonon mode</category>' in str(verf_result[0])
    # method
    # Band 1
    assert '<method>L15</method>' in str(verf_result[0])
    assert '<method>L27</method>' in str(verf_result[0])
    assert '<method>L21</method>' in str(verf_result[0])
    # Band 2
    assert '<method>L51</method>' in str(verf_result[0])
    assert '<method>L45</method>' in str(verf_result[0])
    assert '<method>L39</method>' in str(verf_result[0])
    assert '<method>L33</method>' in str(verf_result[0])
    # Band 3
    assert '<method>L57</method>' in str(verf_result[0])
    # level
    # Band 1
    assert '<level>fully assigned</level>' in str(verf_result[0])
    assert '<level>partly assigned</level>' in str(verf_result[0])
    assert '<level></level>' in str(verf_result[0])
    # Band 2
    assert '<level>NULL</level>' in str(verf_result[0])
    assert '<level>uncertain assignment</level>' in str(verf_result[0])
    assert '<level>species assigned</level>' in str(verf_result[0])
    assert '<level>transition assigned</level>' in str(verf_result[0])
    # Band 3
    assert '<level></level>' in str(verf_result[0])
    # evaluation
    # Band 1
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    # Band 2
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    # Band 3
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # comments
    # Band 1
    assert '<comments>O15</comments>' in str(verf_result[0])
    assert '<comments>O27</comments>' in str(verf_result[0])
    assert '<comments>O21</comments>' in str(verf_result[0])
    # Band 2
    assert '<comments>O51</comments>' in str(verf_result[0])
    assert '<comments>O45</comments>' in str(verf_result[0])
    assert '<comments>O39</comments>' in str(verf_result[0])
    assert '<comments>O33</comments>' in str(verf_result[0])
    # Band 3
    assert '<comments>O57</comments>' in str(verf_result[0])
    # <!-- TRANSITION: MULTIPLICITY AND DEGENERACY -->
    # type
    # Band 1 Assignment 1
    assert '<type></type' in str(verf_result[0])
    assert '<type>no</type>' in str(verf_result[0])
    assert '<type>mode degeneracy</type>' in str(verf_result[0])
    assert '<type>site degeneracy</type>' in str(verf_result[0])
    assert '<type>rotational structure</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    # Band 1 Assignment 2
    assert '<type>mode degeneracy</type' in str(verf_result[0])
    assert '<type>rotational structure</type>' in str(verf_result[0])
    assert '<type>mode degeneracy</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    # Band 1 Assignment 3
    assert '<type>no</type' in str(verf_result[0])
    assert '<type>rotational structure</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>other constituent specie</type>' in str(verf_result[0])
    # Band 2 Assignment 1
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>other isotope specie</type>' in str(verf_result[0])
    # Band 2 Assignment 2
    assert '<type>accidental degeneracy</type>' in str(verf_result[0])
    assert '<type>other constituent specie</type>' in str(verf_result[0])
    assert '<type>accidental degeneracy</type>' in str(verf_result[0])
    # Band 2 Assignment 3
    assert '<type>rotational structure</type>' in str(verf_result[0])
    # Band 2 Assignment 4
    assert '<type>site degeneracy</type>' in str(verf_result[0])
    assert '<type>other isotope specie</type>' in str(verf_result[0])
    assert '<type>no</type>' in str(verf_result[0])
    # Band 3 Assignment 1
    assert '<type>unknown</type>' in str(verf_result[0])
    # degeneracy
    # Band 1 Assignment 1
    assert '<degeneracy></degeneracy' in str(verf_result[0])
    assert '<degeneracy>no</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>double</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>triple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>quadruple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>accidental double</degeneracy>' in str(verf_result[0])
    # Band 1 Assignment 2
    assert '<degeneracy>accidental double</degeneracy' in str(verf_result[0])
    assert '<degeneracy>accidental triple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>other</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 1
    assert '<degeneracy>triple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>double</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 2
    assert '<degeneracy>no</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>accidental double</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>unknown</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 3
    assert '<degeneracy>triple</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 4
    assert '<degeneracy>quadruple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>other</degeneracy>' in str(verf_result[0])
    # Band 3 Assignment 1
    assert '<degeneracy>unknown</degeneracy>' in str(verf_result[0])
    # other_band_uid
    # Band 1 Assignment 1
    assert '<other_band_uid></other_band_uid' in str(verf_result[0])
    assert '<other_band_uid>BAND_T15</other_band_uid' in str(verf_result[0])
    assert '<other_band_uid>BAND_T16</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T17</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T18</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T19</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T20</other_band_uid>' in str(verf_result[0])
    # Band 1 Assignment 2
    assert '<other_band_uid>BAND_T27</other_band_uid' in str(verf_result[0])
    assert '<other_band_uid>BAND_T28</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T29</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 1
    assert '<other_band_uid>BAND_T51</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T53</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T54</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 2
    assert '<other_band_uid>BAND_T45</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T47</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T49</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 3
    assert '<other_band_uid>BAND_T39</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 4
    assert '<other_band_uid>BAND_T33</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T34</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T35</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T38</other_band_uid>' in str(verf_result[0])
    # contribution_level
    # Band 1
    assert '<contribution_level></contribution_level>' in str(verf_result[0])
    # Band 2
    assert '<contribution_level>major</contribution_level>' in str(verf_result[0])
    assert '<contribution_level>medium</contribution_level>' in str(verf_result[0])
    assert '<contribution_level>minor</contribution_level>' in str(verf_result[0])
    assert '<contribution_level>extracted</contribution_level>' in str(verf_result[0])
    # contribution_comments
    # Band 1
    assert '<contribution_comments>V15</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V27</contribution_comments>' in str(verf_result[0])
    # Band 2
    assert '<contribution_comments>V51</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V45</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V39</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V33</contribution_comments>' in str(verf_result[0])
    # <!-- BAND: TRANSITION MODES -->
    assert '<uid>Y15</uid>' in str(verf_result[0])
    assert '<uid>Y16</uid>' in str(verf_result[0])
    assert '<uid>Y17</uid>' in str(verf_result[0])
    assert '<uid>Y18</uid>' in str(verf_result[0])
    assert '<uid>Y19</uid>' in str(verf_result[0])
    assert '<uid>Y20</uid>' in str(verf_result[0])
    assert '<uid>Y27</uid>' in str(verf_result[0])
    assert '<uid>Y28</uid>' in str(verf_result[0])
    assert '<uid>Y31</uid>' in str(verf_result[0])
    assert '<uid>Y21</uid>' in str(verf_result[0])
    assert '<uid>Y23</uid>' in str(verf_result[0])
    assert '<uid>Y51</uid>' in str(verf_result[0])
    assert '<uid>Y53</uid>' in str(verf_result[0])
    assert '<uid>Y45</uid>' in str(verf_result[0])
    assert '<uid>Y48</uid>' in str(verf_result[0])
    assert '<uid>Y49</uid>' in str(verf_result[0])
    assert '<uid>Y39</uid>' in str(verf_result[0])
    assert '<uid>Y40</uid>' in str(verf_result[0])
    assert '<uid>Y33</uid>' in str(verf_result[0])
    # crystal_molecule_sites label
    assert '<label>Z15</label>' in str(verf_result[0])
    assert '<label>Z16</label>' in str(verf_result[0])
    assert '<label>Z17</label>' in str(verf_result[0])
    assert '<label>Z18</label>' in str(verf_result[0])
    assert '<label>Z19</label>' in str(verf_result[0])
    assert '<label>Z20</label>' in str(verf_result[0])
    assert '<label>Z27</label>' in str(verf_result[0])
    assert '<label>Z28</label>' in str(verf_result[0])
    assert '<label>Z29</label>' in str(verf_result[0])
    assert '<label>Z31</label>' in str(verf_result[0])
    assert '<label>Z32</label>' in str(verf_result[0])
    assert '<label>Z21</label>' in str(verf_result[0])
    assert '<label>Z23</label>' in str(verf_result[0])
    assert '<label>Z24</label>' in str(verf_result[0])
    assert '<label>Z51</label>' in str(verf_result[0])
    assert '<label>Z52</label>' in str(verf_result[0])
    assert '<label>Z53</label>' in str(verf_result[0])
    assert '<label>Z55</label>' in str(verf_result[0])
    assert '<label>Z56</label>' in str(verf_result[0])
    assert '<label>Z45</label>' in str(verf_result[0])
    assert '<label>Z46</label>' in str(verf_result[0])
    assert '<label>Z48</label>' in str(verf_result[0])
    assert '<label>Z49</label>' in str(verf_result[0])
    assert '<label>Z50</label>' in str(verf_result[0])
    assert '<label>Z39</label>' in str(verf_result[0])
    assert '<label>Z40</label>' in str(verf_result[0])
    assert '<label>Z42</label>' in str(verf_result[0])
    assert '<label>Z33</label>' in str(verf_result[0])
    assert '<label>Z35</label>' in str(verf_result[0])
    # symmetry_label
    assert '<symmetry_label>AA15</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA16</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA17</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA18</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA19</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA20</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA27</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA28</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA29</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA30</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA31</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA32</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA21</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA22</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA23</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA24</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA25</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA51</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA52</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA53</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA54</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA55</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA56</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA45</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA46</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA47</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA48</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA49</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA50</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA39</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA40</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA41</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA42</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA43</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA33</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA34</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA35</symmetry_label>' in str(verf_result[0])
    # crystal_sites label
    assert '<label>AB15</label>' in str(verf_result[0])
    assert '<label>AB16</label>' in str(verf_result[0])
    assert '<label>AB17</label>' in str(verf_result[0])
    assert '<label>AB18</label>' in str(verf_result[0])
    assert '<label>AB19</label>' in str(verf_result[0])
    assert '<label>AB20</label>' in str(verf_result[0])
    assert '<label>AB27</label>' in str(verf_result[0])
    assert '<label>AB28</label>' in str(verf_result[0])
    assert '<label>AB31</label>' in str(verf_result[0])
    assert '<label>AB21</label>' in str(verf_result[0])
    assert '<label>AB22</label>' in str(verf_result[0])
    assert '<label>AB23</label>' in str(verf_result[0])
    assert '<label>AB24</label>' in str(verf_result[0])
    assert '<label>AB51</label>' in str(verf_result[0])
    assert '<label>AB52</label>' in str(verf_result[0])
    assert '<label>AB53</label>' in str(verf_result[0])
    assert '<label>AB45</label>' in str(verf_result[0])
    assert '<label>AB48</label>' in str(verf_result[0])
    assert '<label>AB49</label>' in str(verf_result[0])
    assert '<label>AB50</label>' in str(verf_result[0])
    assert '<label>AB39</label>' in str(verf_result[0])
    assert '<label>AB40</label>' in str(verf_result[0])
    assert '<label>AB41</label>' in str(verf_result[0])
    assert '<label>AB33</label>' in str(verf_result[0])
    assert '<label>AB34</label>' in str(verf_result[0])
    # sites_comments
    assert '<sites_comments>AC15</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC16</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC17</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC18</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC19</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC20</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC27</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC28</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC31</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC21</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC23</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC51</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC53</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC45</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC48</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC49</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC39</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC40</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC33</sites_comments>' in str(verf_result[0])
    # electronic_modes label
    assert '<label>AG15</label>' in str(verf_result[0])
    assert '<label>AG16</label>' in str(verf_result[0])
    assert '<label>AG17</label>' in str(verf_result[0])
    assert '<label>AG18</label>' in str(verf_result[0])
    assert '<label>AG19</label>' in str(verf_result[0])
    assert '<label>AG20</label>' in str(verf_result[0])
    assert '<label>AG21</label>' in str(verf_result[0])
    assert '<label>AG51</label>' in str(verf_result[0])
    assert '<label>AG52</label>' in str(verf_result[0])
    assert '<label>AG53</label>' in str(verf_result[0])
    assert '<label>AG46</label>' in str(verf_result[0])
    assert '<label>AG39</label>' in str(verf_result[0])
    assert '<label>AG40</label>' in str(verf_result[0])
    assert '<label>AG40</label>' in str(verf_result[0])
    # electronic_modes type
    assert '<type>crystal field</type>' in str(verf_result[0])
    assert '<type>ligand-to-metal charge-transfer</type>' in str(verf_result[0])
    assert '<type>intervalence charge transfer</type>' in str(verf_result[0])
    assert '<type>double exciton</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>crystal field</type>' in str(verf_result[0])
    # electronic_modes comments
    assert '<comments>AH15</comments>' in str(verf_result[0])
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>AH21</comments>' in str(verf_result[0])
    assert '<comments>AH51</comments>' in str(verf_result[0])
    assert '<comments>AH45</comments>' in str(verf_result[0])
    assert '<comments>AH39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: VIBRATION MODES -->
    # vibration_modes label
    assert '<label>AL15</label>' in str(verf_result[0])
    assert '<label>AL16</label>' in str(verf_result[0])
    assert '<label>AL17</label>' in str(verf_result[0])
    assert '<label>AL18</label>' in str(verf_result[0])
    assert '<label>AL19</label>' in str(verf_result[0])
    assert '<label>AL20</label>' in str(verf_result[0])
    assert '<label>AL27</label>' in str(verf_result[0])
    assert '<label>AL29</label>' in str(verf_result[0])
    assert '<label>AL21</label>' in str(verf_result[0])
    assert '<label>AL23</label>' in str(verf_result[0])
    assert '<label>AL24</label>' in str(verf_result[0])
    assert '<label>AL51</label>' in str(verf_result[0])
    assert '<label>AL52</label>' in str(verf_result[0])
    assert '<label>AL45</label>' in str(verf_result[0])
    assert '<label>AL46</label>' in str(verf_result[0])
    assert '<label>AL39</label>' in str(verf_result[0])
    assert '<label>AL40</label>' in str(verf_result[0])
    assert '<label>AL41</label>' in str(verf_result[0])
    # vibration_modes type
    assert '<type>stretching</type>' in str(verf_result[0])
    assert '<type>stretching sym.</type>' in str(verf_result[0])
    assert '<type>stretching asym.</type>' in str(verf_result[0])
    assert '<type>bending</type>' in str(verf_result[0])
    assert '<type>bending in-p</type>' in str(verf_result[0])
    assert '<type>bending out-p</type>' in str(verf_result[0])
    assert '<type>bending asym. in-p (rocking)</type>' in str(verf_result[0])
    assert '<type>bending sym. out-p (wagging)</type>' in str(verf_result[0])
    assert '<type>bending sym.</type>' in str(verf_result[0])
    assert '<type>bending asym.</type>' in str(verf_result[0])
    assert '<type>bending sym. in-p (scissoring)</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>deformation in-p</type>' in str(verf_result[0])
    assert '<type>deformation out-p</type>' in str(verf_result[0])
    assert '<type>deformation sym</type>' in str(verf_result[0])
    # vibration_modes chemical_bonds uid
    assert '<uid></uid>' in str(verf_result[0])
    assert '<uid>AM15</uid>' in str(verf_result[0])
    assert '<uid>AM16</uid>' in str(verf_result[0])
    assert '<uid>AM17</uid>' in str(verf_result[0])
    assert '<uid>AM18</uid>' in str(verf_result[0])
    assert '<uid>AM19</uid>' in str(verf_result[0])
    assert '<uid>AM20</uid>' in str(verf_result[0])
    assert '<uid>AM27</uid>' in str(verf_result[0])
    assert '<uid>AM28</uid>' in str(verf_result[0])
    assert '<uid>AM29</uid>' in str(verf_result[0])
    assert '<uid>AM31</uid>' in str(verf_result[0])
    assert '<uid>AM21</uid>' in str(verf_result[0])
    assert '<uid>AM22</uid>' in str(verf_result[0])
    assert '<uid>AM23</uid>' in str(verf_result[0])
    assert '<uid>AM52</uid>' in str(verf_result[0])
    assert '<uid>AM53</uid>' in str(verf_result[0])
    assert '<uid>AM45</uid>' in str(verf_result[0])
    assert '<uid>AM39</uid>' in str(verf_result[0])
    assert '<uid>AM41</uid>' in str(verf_result[0])
    # vibration_modes comments
    assert '<comments>AN15</comments>' in str(verf_result[0])
    assert '<comments>AN21</comments>' in str(verf_result[0])
    assert '<comments>AN51</comments>' in str(verf_result[0])
    assert '<comments>AN45</comments>' in str(verf_result[0])
    assert '<comments>AN39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: ROTATION MODES -->
    # rotation_modes label
    assert '<label>AR15</label>' in str(verf_result[0])
    assert '<label>AR16</label>' in str(verf_result[0])
    assert '<label>AR17</label>' in str(verf_result[0])
    assert '<label>AR18</label>' in str(verf_result[0])
    assert '<label>AR19</label>' in str(verf_result[0])
    assert '<label>AR20</label>' in str(verf_result[0])
    assert '<label>AR27</label>' in str(verf_result[0])
    assert '<label>AR29</label>' in str(verf_result[0])
    assert '<label>AR21</label>' in str(verf_result[0])
    assert '<label>AR22</label>' in str(verf_result[0])
    assert '<label>AR23</label>' in str(verf_result[0])
    assert '<label>AR51</label>' in str(verf_result[0])
    assert '<label>AR45</label>' in str(verf_result[0])
    assert '<label>AR46</label>' in str(verf_result[0])
    assert '<label>AR47</label>' in str(verf_result[0])
    assert '<label>AR48</label>' in str(verf_result[0])
    assert '<label>AR39</label>' in str(verf_result[0])
    assert '<label>AR40</label>' in str(verf_result[0])
    assert '<label>AR41</label>' in str(verf_result[0])
    # rotation_modes type
    assert '<type>free rotation</type>' in str(verf_result[0])
    assert '<type>hindered rotation</type>' in str(verf_result[0])
    assert '<type>libration</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>free rotation</type>' in str(verf_result[0])
    # rotation_modes comments
    assert '<comments>AS15</comments>' in str(verf_result[0])
    assert '<comments>AS27</comments>' in str(verf_result[0])
    assert '<comments>AS21</comments>' in str(verf_result[0])
    assert '<comments>AS51</comments>' in str(verf_result[0])
    assert '<comments>AS45</comments>' in str(verf_result[0])
    assert '<comments>AS39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: PHONON MODES -->
    # phonon_modes label
    assert '<label>AW15</label>' in str(verf_result[0])
    assert '<label>AW16</label>' in str(verf_result[0])
    assert '<label>AW17</label>' in str(verf_result[0])
    assert '<label>AW18</label>' in str(verf_result[0])
    assert '<label>AW19</label>' in str(verf_result[0])
    assert '<label>AW20</label>' in str(verf_result[0])
    assert '<label>AW27</label>' in str(verf_result[0])
    assert '<label>AW29</label>' in str(verf_result[0])
    assert '<label>AW21</label>' in str(verf_result[0])
    assert '<label>AW22</label>' in str(verf_result[0])
    assert '<label>AW23</label>' in str(verf_result[0])
    assert '<label>AW51</label>' in str(verf_result[0])
    assert '<label>AW45</label>' in str(verf_result[0])
    assert '<label>AW46</label>' in str(verf_result[0])
    assert '<label>AW47</label>' in str(verf_result[0])
    assert '<label>AW48</label>' in str(verf_result[0])
    assert '<label>AW39</label>' in str(verf_result[0])
    assert '<label>AW40</label>' in str(verf_result[0])
    assert '<label>AW41</label>' in str(verf_result[0])
    # phonon_modes type
    assert '<type>translation</type>' in str(verf_result[0])
    assert '<type>longitudinal optic translation</type>' in str(verf_result[0])
    assert '<type>transverse optic translation</type>' in str(verf_result[0])
    assert '<type>longitudinal acoustic translation</type>' in str(verf_result[0])
    assert '<type>transverse acoustic translation</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    # phonon_modes comments
    assert '<comments>AX15</comments>' in str(verf_result[0])
    assert '<comments>AX27</comments>' in str(verf_result[0])
    assert '<comments>AX21</comments>' in str(verf_result[0])
    assert '<comments>AX51</comments>' in str(verf_result[0])
    assert '<comments>AX45</comments>' in str(verf_result[0])
    assert '<comments>AX39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: RESONANCES -->
    # resonances type
    assert '<type>Fermi resonance</type>' in str(verf_result[0])
    assert '<type>electron-phonon coupling</type>' in str(verf_result[0])
    assert '<type>rotational-vibrational coupling</type>' in str(verf_result[0])
    assert '<type>vibration-phonon coupling</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    # resonances band_uid
    assert '<band_uid>BAND_BB15</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB16</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB17</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB18</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB19</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB20</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB27</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB29</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB21</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB22</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB23</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB51</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB45</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB46</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB49</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB40</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB40</band_uid>' in str(verf_result[0])
    # resonances band_assignment_number
    assert '<band_assignment_number>1</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>2</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>3</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>4</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>5</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>6</band_assignment_number>' in str(verf_result[0])
    # resonances comments
    assert '<comments>BD15</comments>' in str(verf_result[0])
    assert '<comments>BD16</comments>' in str(verf_result[0])
    assert '<comments>BD17</comments>' in str(verf_result[0])
    assert '<comments>BD18</comments>' in str(verf_result[0])
    assert '<comments>BD19</comments>' in str(verf_result[0])
    assert '<comments>BD20</comments>' in str(verf_result[0])
    assert '<comments>BD28</comments>' in str(verf_result[0])
    assert '<comments>BD29</comments>' in str(verf_result[0])
    assert '<comments>BD21</comments>' in str(verf_result[0])
    assert '<comments>BD22</comments>' in str(verf_result[0])
    assert '<comments>BD51</comments>' in str(verf_result[0])
    assert '<comments>BD45</comments>' in str(verf_result[0])
    assert '<comments>BD46</comments>' in str(verf_result[0])
    assert '<comments>BD49</comments>' in str(verf_result[0])
    assert '<comments>BD39</comments>' in str(verf_result[0])
    assert '<comments>BD40</comments>' in str(verf_result[0])
    # no empty tags
    assert '/>' not in str(verf_result[0])
    # qtys
    assert str(verf_result[0]).count("<assignment>") == 8
    assert str(verf_result[0]).count("<contribution_level>") == 8
    assert str(verf_result[0]).count("<contribution_comments>") == 8
    assert str(verf_result[0]).count("<transition>") == 8
    assert str(verf_result[0]).count("<crystal_molecule_sites>") == 20
    assert str(verf_result[0]).count("<crystal_sites>") == 20
    assert str(verf_result[0]).count("<sites_comments>") == 20
    assert str(verf_result[0]).count("<multiplicity>") == 25
    assert str(verf_result[0]).count("<electronic_modes>") == 8
    assert str(verf_result[0]).count("<vibration_modes>") == 8
    assert str(verf_result[0]).count("<chemical_bonds>") == 21
    assert str(verf_result[0]).count("<rotation_modes>") == 8
    assert str(verf_result[0]).count("<phonon_modes>") == 8
    assert str(verf_result[0]).count("<resonances>") == 8
    assert str(verf_result[0]).count("<resonance>") == 26
    # Abs
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_assignment_abs.xlsx", "ABS")
    file_save(verf_result[0])
    # <!-- BAND: TRANSITION ASSIGNMENTS AND MODES -->
    # <number>
    # Band 1
    assert '<number>1</number>' in str(verf_result[0])
    assert '<number>2</number>' in str(verf_result[0])
    assert '<number>3</number>' in str(verf_result[0])
    # Band 2
    assert '<number>1</number>' in str(verf_result[0])
    assert '<number>2</number>' in str(verf_result[0])
    assert '<number>3</number>' in str(verf_result[0])
    assert '<number>4</number>' in str(verf_result[0])
    # Band 3
    assert '<number>1</number>' in str(verf_result[0])
    # <label>
    # Band 1
    assert '<label>I15</label>' in str(verf_result[0])
    assert '<label>I27</label>' in str(verf_result[0])
    assert '<label>I21</label>' in str(verf_result[0])
    # Band 2
    assert '<label>I51</label>' in str(verf_result[0])
    assert '<label>I45</label>' in str(verf_result[0])
    assert '<label>I39</label>' in str(verf_result[0])
    assert '<label>I33</label>' in str(verf_result[0])
    # Band 3
    assert '<label>I57</label>' in str(verf_result[0])
    # symmetry_label
    # Band 1
    assert '<symmetry_label>E</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>E1</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>unknown</symmetry_label>' in str(verf_result[0])
    # Band 2
    assert '<symmetry_label>Au</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>A</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>NULL</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>Ag</symmetry_label>' in str(verf_result[0])
    # Band 3
    assert '<symmetry_label>A2g</symmetry_label>' in str(verf_result[0])
    # category
    # Band 1
    assert '<category>electronic transition</category>' in str(verf_result[0])
    assert '<category>rotation</category>' in str(verf_result[0])
    assert '<category>overtone vibration</category>' in str(verf_result[0])
    # Band 2
    assert '<category>combination</category>' in str(verf_result[0])
    assert '<category>overtone rotation</category>' in str(verf_result[0])
    assert '<category>unknown</category>' in str(verf_result[0])
    assert '<category>other</category>' in str(verf_result[0])
    # Band 3
    assert '<category>phonon mode</category>' in str(verf_result[0])
    # method
    # Band 1
    assert '<method>L15</method>' in str(verf_result[0])
    assert '<method>L27</method>' in str(verf_result[0])
    assert '<method>L21</method>' in str(verf_result[0])
    # Band 2
    assert '<method>L51</method>' in str(verf_result[0])
    assert '<method>L45</method>' in str(verf_result[0])
    assert '<method>L39</method>' in str(verf_result[0])
    assert '<method>L33</method>' in str(verf_result[0])
    # Band 3
    assert '<method>L57</method>' in str(verf_result[0])
    # level
    # Band 1
    assert '<level>fully assigned</level>' in str(verf_result[0])
    assert '<level>partly assigned</level>' in str(verf_result[0])
    assert '<level></level>' in str(verf_result[0])
    # Band 2
    assert '<level>NULL</level>' in str(verf_result[0])
    assert '<level>uncertain assignment</level>' in str(verf_result[0])
    assert '<level>species assigned</level>' in str(verf_result[0])
    assert '<level>transition assigned</level>' in str(verf_result[0])
    # Band 3
    assert '<level></level>' in str(verf_result[0])
    # evaluation
    # Band 1
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    # Band 2
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    # Band 3
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # comments
    # Band 1
    assert '<comments>O15</comments>' in str(verf_result[0])
    assert '<comments>O27</comments>' in str(verf_result[0])
    assert '<comments>O21</comments>' in str(verf_result[0])
    # Band 2
    assert '<comments>O51</comments>' in str(verf_result[0])
    assert '<comments>O45</comments>' in str(verf_result[0])
    assert '<comments>O39</comments>' in str(verf_result[0])
    assert '<comments>O33</comments>' in str(verf_result[0])
    # Band 3
    assert '<comments>O57</comments>' in str(verf_result[0])
    # <!-- TRANSITION: MULTIPLICITY AND DEGENERACY -->
    # type
    # Band 1 Assignment 1
    assert '<type></type' in str(verf_result[0])
    assert '<type>no</type>' in str(verf_result[0])
    assert '<type>mode degeneracy</type>' in str(verf_result[0])
    assert '<type>site degeneracy</type>' in str(verf_result[0])
    assert '<type>rotational structure</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    # Band 1 Assignment 2
    assert '<type>mode degeneracy</type' in str(verf_result[0])
    assert '<type>rotational structure</type>' in str(verf_result[0])
    assert '<type>mode degeneracy</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    # Band 1 Assignment 3
    assert '<type>no</type' in str(verf_result[0])
    assert '<type>rotational structure</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>other constituent specie</type>' in str(verf_result[0])
    # Band 2 Assignment 1
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>other isotope specie</type>' in str(verf_result[0])
    # Band 2 Assignment 2
    assert '<type>accidental degeneracy</type>' in str(verf_result[0])
    assert '<type>other constituent specie</type>' in str(verf_result[0])
    assert '<type>accidental degeneracy</type>' in str(verf_result[0])
    # Band 2 Assignment 3
    assert '<type>rotational structure</type>' in str(verf_result[0])
    # Band 2 Assignment 4
    assert '<type>site degeneracy</type>' in str(verf_result[0])
    assert '<type>other isotope specie</type>' in str(verf_result[0])
    assert '<type>no</type>' in str(verf_result[0])
    # Band 3 Assignment 1
    assert '<type>unknown</type>' in str(verf_result[0])
    # degeneracy
    # Band 1 Assignment 1
    assert '<degeneracy></degeneracy' in str(verf_result[0])
    assert '<degeneracy>no</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>double</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>triple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>quadruple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>accidental double</degeneracy>' in str(verf_result[0])
    # Band 1 Assignment 2
    assert '<degeneracy>accidental double</degeneracy' in str(verf_result[0])
    assert '<degeneracy>accidental triple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>other</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 1
    assert '<degeneracy>triple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>double</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 2
    assert '<degeneracy>no</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>accidental double</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>unknown</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 3
    assert '<degeneracy>triple</degeneracy>' in str(verf_result[0])
    # Band 2 Assignment 4
    assert '<degeneracy>quadruple</degeneracy>' in str(verf_result[0])
    assert '<degeneracy>other</degeneracy>' in str(verf_result[0])
    # Band 3 Assignment 1
    assert '<degeneracy>unknown</degeneracy>' in str(verf_result[0])
    # other_band_uid
    # Band 1 Assignment 1
    assert '<other_band_uid></other_band_uid' in str(verf_result[0])
    assert '<other_band_uid>BAND_T15</other_band_uid' in str(verf_result[0])
    assert '<other_band_uid>BAND_T16</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T17</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T18</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T19</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T20</other_band_uid>' in str(verf_result[0])
    # Band 1 Assignment 2
    assert '<other_band_uid>BAND_T27</other_band_uid' in str(verf_result[0])
    assert '<other_band_uid>BAND_T28</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T29</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 1
    assert '<other_band_uid>BAND_T51</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T53</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T54</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 2
    assert '<other_band_uid>BAND_T45</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T47</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T49</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 3
    assert '<other_band_uid>BAND_T39</other_band_uid>' in str(verf_result[0])
    # Band 2 Assignment 4
    assert '<other_band_uid>BAND_T33</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T34</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T35</other_band_uid>' in str(verf_result[0])
    assert '<other_band_uid>BAND_T38</other_band_uid>' in str(verf_result[0])
    # contribution_level
    # Band 1
    assert '<contribution_level></contribution_level>' in str(verf_result[0])
    # Band 2
    assert '<contribution_level>major</contribution_level>' in str(verf_result[0])
    assert '<contribution_level>medium</contribution_level>' in str(verf_result[0])
    assert '<contribution_level>minor</contribution_level>' in str(verf_result[0])
    assert '<contribution_level>extracted</contribution_level>' in str(verf_result[0])
    # contribution_comments
    # Band 1
    assert '<contribution_comments>V15</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V27</contribution_comments>' in str(verf_result[0])
    # Band 2
    assert '<contribution_comments>V51</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V45</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V39</contribution_comments>' in str(verf_result[0])
    assert '<contribution_comments>V33</contribution_comments>' in str(verf_result[0])
    # <!-- BAND: TRANSITION MODES -->
    assert '<uid>Y15</uid>' in str(verf_result[0])
    assert '<uid>Y16</uid>' in str(verf_result[0])
    assert '<uid>Y17</uid>' in str(verf_result[0])
    assert '<uid>Y18</uid>' in str(verf_result[0])
    assert '<uid>Y19</uid>' in str(verf_result[0])
    assert '<uid>Y20</uid>' in str(verf_result[0])
    assert '<uid>Y27</uid>' in str(verf_result[0])
    assert '<uid>Y28</uid>' in str(verf_result[0])
    assert '<uid>Y31</uid>' in str(verf_result[0])
    assert '<uid>Y21</uid>' in str(verf_result[0])
    assert '<uid>Y23</uid>' in str(verf_result[0])
    assert '<uid>Y51</uid>' in str(verf_result[0])
    assert '<uid>Y53</uid>' in str(verf_result[0])
    assert '<uid>Y45</uid>' in str(verf_result[0])
    assert '<uid>Y48</uid>' in str(verf_result[0])
    assert '<uid>Y49</uid>' in str(verf_result[0])
    assert '<uid>Y39</uid>' in str(verf_result[0])
    assert '<uid>Y40</uid>' in str(verf_result[0])
    assert '<uid>Y33</uid>' in str(verf_result[0])
    # crystal_molecule_sites label
    assert '<label>Z15</label>' in str(verf_result[0])
    assert '<label>Z16</label>' in str(verf_result[0])
    assert '<label>Z17</label>' in str(verf_result[0])
    assert '<label>Z18</label>' in str(verf_result[0])
    assert '<label>Z19</label>' in str(verf_result[0])
    assert '<label>Z20</label>' in str(verf_result[0])
    assert '<label>Z27</label>' in str(verf_result[0])
    assert '<label>Z28</label>' in str(verf_result[0])
    assert '<label>Z29</label>' in str(verf_result[0])
    assert '<label>Z31</label>' in str(verf_result[0])
    assert '<label>Z32</label>' in str(verf_result[0])
    assert '<label>Z21</label>' in str(verf_result[0])
    assert '<label>Z23</label>' in str(verf_result[0])
    assert '<label>Z24</label>' in str(verf_result[0])
    assert '<label>Z51</label>' in str(verf_result[0])
    assert '<label>Z52</label>' in str(verf_result[0])
    assert '<label>Z53</label>' in str(verf_result[0])
    assert '<label>Z55</label>' in str(verf_result[0])
    assert '<label>Z56</label>' in str(verf_result[0])
    assert '<label>Z45</label>' in str(verf_result[0])
    assert '<label>Z46</label>' in str(verf_result[0])
    assert '<label>Z48</label>' in str(verf_result[0])
    assert '<label>Z49</label>' in str(verf_result[0])
    assert '<label>Z50</label>' in str(verf_result[0])
    assert '<label>Z39</label>' in str(verf_result[0])
    assert '<label>Z40</label>' in str(verf_result[0])
    assert '<label>Z42</label>' in str(verf_result[0])
    assert '<label>Z33</label>' in str(verf_result[0])
    assert '<label>Z35</label>' in str(verf_result[0])
    # symmetry_label
    assert '<symmetry_label>AA15</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA16</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA17</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA18</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA19</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA20</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA27</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA28</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA29</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA30</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA31</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA32</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA21</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA22</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA23</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA24</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA25</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA51</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA52</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA53</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA54</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA55</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA56</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA45</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA46</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA47</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA48</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA49</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA50</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA39</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA40</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA41</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA42</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA43</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA33</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA34</symmetry_label>' in str(verf_result[0])
    assert '<symmetry_label>AA35</symmetry_label>' in str(verf_result[0])
    # crystal_sites label
    assert '<label>AB15</label>' in str(verf_result[0])
    assert '<label>AB16</label>' in str(verf_result[0])
    assert '<label>AB17</label>' in str(verf_result[0])
    assert '<label>AB18</label>' in str(verf_result[0])
    assert '<label>AB19</label>' in str(verf_result[0])
    assert '<label>AB20</label>' in str(verf_result[0])
    assert '<label>AB27</label>' in str(verf_result[0])
    assert '<label>AB28</label>' in str(verf_result[0])
    assert '<label>AB31</label>' in str(verf_result[0])
    assert '<label>AB21</label>' in str(verf_result[0])
    assert '<label>AB22</label>' in str(verf_result[0])
    assert '<label>AB23</label>' in str(verf_result[0])
    assert '<label>AB24</label>' in str(verf_result[0])
    assert '<label>AB51</label>' in str(verf_result[0])
    assert '<label>AB52</label>' in str(verf_result[0])
    assert '<label>AB53</label>' in str(verf_result[0])
    assert '<label>AB45</label>' in str(verf_result[0])
    assert '<label>AB48</label>' in str(verf_result[0])
    assert '<label>AB49</label>' in str(verf_result[0])
    assert '<label>AB50</label>' in str(verf_result[0])
    assert '<label>AB39</label>' in str(verf_result[0])
    assert '<label>AB40</label>' in str(verf_result[0])
    assert '<label>AB41</label>' in str(verf_result[0])
    assert '<label>AB33</label>' in str(verf_result[0])
    assert '<label>AB34</label>' in str(verf_result[0])
    # sites_comments
    assert '<sites_comments>AC15</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC16</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC17</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC18</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC19</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC20</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC27</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC28</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC31</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC21</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC23</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC51</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC53</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC45</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC48</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC49</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC39</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC40</sites_comments>' in str(verf_result[0])
    assert '<sites_comments>AC33</sites_comments>' in str(verf_result[0])
    # electronic_modes label
    assert '<label>AG15</label>' in str(verf_result[0])
    assert '<label>AG16</label>' in str(verf_result[0])
    assert '<label>AG17</label>' in str(verf_result[0])
    assert '<label>AG18</label>' in str(verf_result[0])
    assert '<label>AG19</label>' in str(verf_result[0])
    assert '<label>AG20</label>' in str(verf_result[0])
    assert '<label>AG21</label>' in str(verf_result[0])
    assert '<label>AG51</label>' in str(verf_result[0])
    assert '<label>AG52</label>' in str(verf_result[0])
    assert '<label>AG53</label>' in str(verf_result[0])
    assert '<label>AG46</label>' in str(verf_result[0])
    assert '<label>AG39</label>' in str(verf_result[0])
    assert '<label>AG40</label>' in str(verf_result[0])
    assert '<label>AG40</label>' in str(verf_result[0])
    # electronic_modes type
    assert '<type>crystal field</type>' in str(verf_result[0])
    assert '<type>ligand-to-metal charge-transfer</type>' in str(verf_result[0])
    assert '<type>intervalence charge transfer</type>' in str(verf_result[0])
    assert '<type>double exciton</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>crystal field</type>' in str(verf_result[0])
    # electronic_modes comments
    assert '<comments>AH15</comments>' in str(verf_result[0])
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>AH21</comments>' in str(verf_result[0])
    assert '<comments>AH51</comments>' in str(verf_result[0])
    assert '<comments>AH45</comments>' in str(verf_result[0])
    assert '<comments>AH39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: VIBRATION MODES -->
    # vibration_modes label
    assert '<label>AL15</label>' in str(verf_result[0])
    assert '<label>AL16</label>' in str(verf_result[0])
    assert '<label>AL17</label>' in str(verf_result[0])
    assert '<label>AL18</label>' in str(verf_result[0])
    assert '<label>AL19</label>' in str(verf_result[0])
    assert '<label>AL20</label>' in str(verf_result[0])
    assert '<label>AL27</label>' in str(verf_result[0])
    assert '<label>AL29</label>' in str(verf_result[0])
    assert '<label>AL21</label>' in str(verf_result[0])
    assert '<label>AL23</label>' in str(verf_result[0])
    assert '<label>AL24</label>' in str(verf_result[0])
    assert '<label>AL51</label>' in str(verf_result[0])
    assert '<label>AL52</label>' in str(verf_result[0])
    assert '<label>AL45</label>' in str(verf_result[0])
    assert '<label>AL46</label>' in str(verf_result[0])
    assert '<label>AL39</label>' in str(verf_result[0])
    assert '<label>AL40</label>' in str(verf_result[0])
    assert '<label>AL41</label>' in str(verf_result[0])
    # vibration_modes type
    assert '<type>stretching</type>' in str(verf_result[0])
    assert '<type>stretching sym.</type>' in str(verf_result[0])
    assert '<type>stretching asym.</type>' in str(verf_result[0])
    assert '<type>bending</type>' in str(verf_result[0])
    assert '<type>bending in-p</type>' in str(verf_result[0])
    assert '<type>bending out-p</type>' in str(verf_result[0])
    assert '<type>bending asym. in-p (rocking)</type>' in str(verf_result[0])
    assert '<type>bending sym. out-p (wagging)</type>' in str(verf_result[0])
    assert '<type>bending sym.</type>' in str(verf_result[0])
    assert '<type>bending asym.</type>' in str(verf_result[0])
    assert '<type>bending sym. in-p (scissoring)</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>deformation in-p</type>' in str(verf_result[0])
    assert '<type>deformation out-p</type>' in str(verf_result[0])
    assert '<type>deformation sym</type>' in str(verf_result[0])
    # vibration_modes chemical_bonds uid
    assert '<uid></uid>' in str(verf_result[0])
    assert '<uid>AM15</uid>' in str(verf_result[0])
    assert '<uid>AM16</uid>' in str(verf_result[0])
    assert '<uid>AM17</uid>' in str(verf_result[0])
    assert '<uid>AM18</uid>' in str(verf_result[0])
    assert '<uid>AM19</uid>' in str(verf_result[0])
    assert '<uid>AM20</uid>' in str(verf_result[0])
    assert '<uid>AM27</uid>' in str(verf_result[0])
    assert '<uid>AM28</uid>' in str(verf_result[0])
    assert '<uid>AM29</uid>' in str(verf_result[0])
    assert '<uid>AM31</uid>' in str(verf_result[0])
    assert '<uid>AM21</uid>' in str(verf_result[0])
    assert '<uid>AM22</uid>' in str(verf_result[0])
    assert '<uid>AM23</uid>' in str(verf_result[0])
    assert '<uid>AM52</uid>' in str(verf_result[0])
    assert '<uid>AM53</uid>' in str(verf_result[0])
    assert '<uid>AM45</uid>' in str(verf_result[0])
    assert '<uid>AM39</uid>' in str(verf_result[0])
    assert '<uid>AM41</uid>' in str(verf_result[0])
    # vibration_modes comments
    assert '<comments>AN15</comments>' in str(verf_result[0])
    assert '<comments>AN21</comments>' in str(verf_result[0])
    assert '<comments>AN51</comments>' in str(verf_result[0])
    assert '<comments>AN45</comments>' in str(verf_result[0])
    assert '<comments>AN39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: ROTATION MODES -->
    # rotation_modes label
    assert '<label>AR15</label>' in str(verf_result[0])
    assert '<label>AR16</label>' in str(verf_result[0])
    assert '<label>AR17</label>' in str(verf_result[0])
    assert '<label>AR18</label>' in str(verf_result[0])
    assert '<label>AR19</label>' in str(verf_result[0])
    assert '<label>AR20</label>' in str(verf_result[0])
    assert '<label>AR27</label>' in str(verf_result[0])
    assert '<label>AR29</label>' in str(verf_result[0])
    assert '<label>AR21</label>' in str(verf_result[0])
    assert '<label>AR22</label>' in str(verf_result[0])
    assert '<label>AR23</label>' in str(verf_result[0])
    assert '<label>AR51</label>' in str(verf_result[0])
    assert '<label>AR45</label>' in str(verf_result[0])
    assert '<label>AR46</label>' in str(verf_result[0])
    assert '<label>AR47</label>' in str(verf_result[0])
    assert '<label>AR48</label>' in str(verf_result[0])
    assert '<label>AR39</label>' in str(verf_result[0])
    assert '<label>AR40</label>' in str(verf_result[0])
    assert '<label>AR41</label>' in str(verf_result[0])
    # rotation_modes type
    assert '<type>free rotation</type>' in str(verf_result[0])
    assert '<type>hindered rotation</type>' in str(verf_result[0])
    assert '<type>libration</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>free rotation</type>' in str(verf_result[0])
    # rotation_modes comments
    assert '<comments>AS15</comments>' in str(verf_result[0])
    assert '<comments>AS27</comments>' in str(verf_result[0])
    assert '<comments>AS21</comments>' in str(verf_result[0])
    assert '<comments>AS51</comments>' in str(verf_result[0])
    assert '<comments>AS45</comments>' in str(verf_result[0])
    assert '<comments>AS39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: PHONON MODES -->
    # phonon_modes label
    assert '<label>AW15</label>' in str(verf_result[0])
    assert '<label>AW16</label>' in str(verf_result[0])
    assert '<label>AW17</label>' in str(verf_result[0])
    assert '<label>AW18</label>' in str(verf_result[0])
    assert '<label>AW19</label>' in str(verf_result[0])
    assert '<label>AW20</label>' in str(verf_result[0])
    assert '<label>AW27</label>' in str(verf_result[0])
    assert '<label>AW29</label>' in str(verf_result[0])
    assert '<label>AW21</label>' in str(verf_result[0])
    assert '<label>AW22</label>' in str(verf_result[0])
    assert '<label>AW23</label>' in str(verf_result[0])
    assert '<label>AW51</label>' in str(verf_result[0])
    assert '<label>AW45</label>' in str(verf_result[0])
    assert '<label>AW46</label>' in str(verf_result[0])
    assert '<label>AW47</label>' in str(verf_result[0])
    assert '<label>AW48</label>' in str(verf_result[0])
    assert '<label>AW39</label>' in str(verf_result[0])
    assert '<label>AW40</label>' in str(verf_result[0])
    assert '<label>AW41</label>' in str(verf_result[0])
    # phonon_modes type
    assert '<type>translation</type>' in str(verf_result[0])
    assert '<type>longitudinal optic translation</type>' in str(verf_result[0])
    assert '<type>transverse optic translation</type>' in str(verf_result[0])
    assert '<type>longitudinal acoustic translation</type>' in str(verf_result[0])
    assert '<type>transverse acoustic translation</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    # phonon_modes comments
    assert '<comments>AX15</comments>' in str(verf_result[0])
    assert '<comments>AX27</comments>' in str(verf_result[0])
    assert '<comments>AX21</comments>' in str(verf_result[0])
    assert '<comments>AX51</comments>' in str(verf_result[0])
    assert '<comments>AX45</comments>' in str(verf_result[0])
    assert '<comments>AX39</comments>' in str(verf_result[0])
    # <!-- TRANSITION: RESONANCES -->
    # resonances type
    assert '<type>Fermi resonance</type>' in str(verf_result[0])
    assert '<type>electron-phonon coupling</type>' in str(verf_result[0])
    assert '<type>rotational-vibrational coupling</type>' in str(verf_result[0])
    assert '<type>vibration-phonon coupling</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    # resonances band_uid
    assert '<band_uid>BAND_BB15</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB16</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB17</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB18</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB19</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB20</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB27</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB29</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB21</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB22</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB23</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB51</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB45</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB46</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB49</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB40</band_uid>' in str(verf_result[0])
    assert '<band_uid>BAND_BB40</band_uid>' in str(verf_result[0])
    # resonances band_assignment_number
    assert '<band_assignment_number>1</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>2</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>3</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>4</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>5</band_assignment_number>' in str(verf_result[0])
    assert '<band_assignment_number>6</band_assignment_number>' in str(verf_result[0])
    # resonances comments
    assert '<comments>BD15</comments>' in str(verf_result[0])
    assert '<comments>BD16</comments>' in str(verf_result[0])
    assert '<comments>BD17</comments>' in str(verf_result[0])
    assert '<comments>BD18</comments>' in str(verf_result[0])
    assert '<comments>BD19</comments>' in str(verf_result[0])
    assert '<comments>BD20</comments>' in str(verf_result[0])
    assert '<comments>BD28</comments>' in str(verf_result[0])
    assert '<comments>BD29</comments>' in str(verf_result[0])
    assert '<comments>BD21</comments>' in str(verf_result[0])
    assert '<comments>BD22</comments>' in str(verf_result[0])
    assert '<comments>BD51</comments>' in str(verf_result[0])
    assert '<comments>BD45</comments>' in str(verf_result[0])
    assert '<comments>BD46</comments>' in str(verf_result[0])
    assert '<comments>BD49</comments>' in str(verf_result[0])
    assert '<comments>BD39</comments>' in str(verf_result[0])
    assert '<comments>BD40</comments>' in str(verf_result[0])
    # no empty tags
    assert str(verf_result[0]).find('/>') == -1
    # qtys
    assert str(verf_result[0]).count("<assignment>") == 8
    assert str(verf_result[0]).count("<contribution_level>") == 8
    assert str(verf_result[0]).count("<contribution_comments>") == 8
    assert str(verf_result[0]).count("<transition>") == 8
    assert str(verf_result[0]).count("<crystal_molecule_sites>") == 20
    assert str(verf_result[0]).count("<crystal_sites>") == 20
    assert str(verf_result[0]).count("<sites_comments>") == 20
    assert str(verf_result[0]).count("<multiplicity>") == 25
    assert str(verf_result[0]).count("<electronic_modes>") == 8
    assert str(verf_result[0]).count("<vibration_modes>") == 8
    assert str(verf_result[0]).count("<chemical_bonds>") == 21
    assert str(verf_result[0]).count("<rotation_modes>") == 8
    assert str(verf_result[0]).count("<phonon_modes>") == 8
    assert str(verf_result[0]).count("<resonances>") == 8
    assert str(verf_result[0]).count("<resonance>") == 26


# Band Assignment
def test_fill_band_characteristic():
    # Raman
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_characteristic_ram.xlsx", "RAMAN")
    file_save(verf_result[0])
    # number
    assert '<number>1</number>' in str(verf_result[0])
    assert '<number>2</number>' in str(verf_result[0])
    assert '<number>3</number>' in str(verf_result[0])
    assert '<number>4</number>' in str(verf_result[0])
    assert '<number>5</number>' in str(verf_result[0])
    assert '<number>6</number>' in str(verf_result[0])
    assert '<number>7</number>' in str(verf_result[0])
    assert '<number>8</number>' in str(verf_result[0])
    assert '<number>9</number>' in str(verf_result[0])
    assert '<number>10</number>' in str(verf_result[0])
    # <!-- BAND: CONSTITUENT -->
    # constituent composition_comments
    assert '<composition_comments>BQ15</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ16</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ17</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ18</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ19</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ20</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ25</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ26</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ31</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ32</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ37</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ38</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ41</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ45</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ53</composition_comments>' in str(verf_result[0])
    # constituent texture_comments
    assert '<texture_comments>BR15</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR16</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR17</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR18</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR19</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR20</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR25</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR26</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR31</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR32</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR37</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR38</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR41</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR45</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR53</texture_comments>' in str(verf_result[0])
    # <!-- BAND: CONSTITUENT ENVIRONMENT PARAMETERS -->
    # parameters_environment temperature unit
    assert '<unit>K</unit>' in str(verf_result[0])
    assert '<unit></unit>' in str(verf_result[0])
    # parameters_environment temperature value
    assert '<value>BT15</value>' in str(verf_result[0])
    assert '<value>BT16</value>' in str(verf_result[0])
    assert '<value>BT17</value>' in str(verf_result[0])
    assert '<value>BT18</value>' in str(verf_result[0])
    assert '<value>BT19</value>' in str(verf_result[0])
    assert '<value>BT20</value>' in str(verf_result[0])
    assert '<value>BT25</value>' in str(verf_result[0])
    assert '<value>BT26</value>' in str(verf_result[0])
    assert '<value>BT31</value>' in str(verf_result[0])
    assert '<value>BT32</value>' in str(verf_result[0])
    assert '<value>BT37</value>' in str(verf_result[0])
    assert '<value>BT38</value>' in str(verf_result[0])
    assert '<value>BT41</value>' in str(verf_result[0])
    assert '<value>BT45</value>' in str(verf_result[0])
    assert '<value>BT53</value>' in str(verf_result[0])
    # parameters_environment temperature error
    assert '<error>BU15</error>' in str(verf_result[0])
    assert '<error>BU16</error>' in str(verf_result[0])
    assert '<error>BU17</error>' in str(verf_result[0])
    assert '<error>BU18</error>' in str(verf_result[0])
    assert '<error>BU19</error>' in str(verf_result[0])
    assert '<error>BU20</error>' in str(verf_result[0])
    assert '<error>BU25</error>' in str(verf_result[0])
    assert '<error>BU26</error>' in str(verf_result[0])
    assert '<error>BU31</error>' in str(verf_result[0])
    assert '<error>BU32</error>' in str(verf_result[0])
    assert '<error>BU37</error>' in str(verf_result[0])
    assert '<error>BU38</error>' in str(verf_result[0])
    assert '<error>BU41</error>' in str(verf_result[0])
    assert '<error>BU45</error>' in str(verf_result[0])
    assert '<error>BU53</error>' in str(verf_result[0])
    # parameters_environment temperature formation
    assert '<formation>BV15</formation>' in str(verf_result[0])
    assert '<formation>BV16</formation>' in str(verf_result[0])
    assert '<formation>BV17</formation>' in str(verf_result[0])
    assert '<formation>BV18</formation>' in str(verf_result[0])
    assert '<formation>BV19</formation>' in str(verf_result[0])
    assert '<formation>BV20</formation>' in str(verf_result[0])
    assert '<formation>BV25</formation>' in str(verf_result[0])
    assert '<formation>BV26</formation>' in str(verf_result[0])
    assert '<formation>BV31</formation>' in str(verf_result[0])
    assert '<formation>BV32</formation>' in str(verf_result[0])
    assert '<formation>BV37</formation>' in str(verf_result[0])
    assert '<formation>BV38</formation>' in str(verf_result[0])
    assert '<formation>BV41</formation>' in str(verf_result[0])
    assert '<formation>BV45</formation>' in str(verf_result[0])
    assert '<formation>BV53</formation>' in str(verf_result[0])
    # parameters_environment temperature max
    assert '<max>BW15</max>' in str(verf_result[0])
    assert '<max>BW16</max>' in str(verf_result[0])
    assert '<max>BW17</max>' in str(verf_result[0])
    assert '<max>BW18</max>' in str(verf_result[0])
    assert '<max>BW19</max>' in str(verf_result[0])
    assert '<max>BW20</max>' in str(verf_result[0])
    assert '<max>BW25</max>' in str(verf_result[0])
    assert '<max>BW26</max>' in str(verf_result[0])
    assert '<max>BW31</max>' in str(verf_result[0])
    assert '<max>BW32</max>' in str(verf_result[0])
    assert '<max>BW37</max>' in str(verf_result[0])
    assert '<max>BW38</max>' in str(verf_result[0])
    assert '<max>BW41</max>' in str(verf_result[0])
    assert '<max>BW45</max>' in str(verf_result[0])
    assert '<max>BW53</max>' in str(verf_result[0])
    # parameters_environment temperature comments
    assert '<comments>BX15</comments>' in str(verf_result[0])
    assert '<comments>BX16</comments>' in str(verf_result[0])
    assert '<comments>BX17</comments>' in str(verf_result[0])
    assert '<comments>BX18</comments>' in str(verf_result[0])
    assert '<comments>BX19</comments>' in str(verf_result[0])
    assert '<comments>BX20</comments>' in str(verf_result[0])
    assert '<comments>BX25</comments>' in str(verf_result[0])
    assert '<comments>BX26</comments>' in str(verf_result[0])
    assert '<comments>BX31</comments>' in str(verf_result[0])
    assert '<comments>BX32</comments>' in str(verf_result[0])
    assert '<comments>BX37</comments>' in str(verf_result[0])
    assert '<comments>BX38</comments>' in str(verf_result[0])
    assert '<comments>BX41</comments>' in str(verf_result[0])
    assert '<comments>BX45</comments>' in str(verf_result[0])
    assert '<comments>BX53</comments>' in str(verf_result[0])
    # <!-- CONSTITUENT ENVIRONMENT: MECHANICAL PRESSURE APPLIED TO THE CONSTITUENT -->
    # parameters_environment pressure unit
    assert '<unit>bar</unit>' in str(verf_result[0])
    assert '<unit></unit>' in str(verf_result[0])
    # parameters_environment pressure value
    assert '<value>BZ15</value>' in str(verf_result[0])
    assert '<value>BZ16</value>' in str(verf_result[0])
    assert '<value>BZ17</value>' in str(verf_result[0])
    assert '<value>BZ18</value>' in str(verf_result[0])
    assert '<value>BZ19</value>' in str(verf_result[0])
    assert '<value>BZ20</value>' in str(verf_result[0])
    assert '<value>BZ25</value>' in str(verf_result[0])
    assert '<value>BZ26</value>' in str(verf_result[0])
    assert '<value>BZ31</value>' in str(verf_result[0])
    assert '<value>BZ32</value>' in str(verf_result[0])
    assert '<value>BZ37</value>' in str(verf_result[0])
    assert '<value>BZ38</value>' in str(verf_result[0])
    assert '<value>BZ41</value>' in str(verf_result[0])
    assert '<value>BZ45</value>' in str(verf_result[0])
    assert '<value>BZ53</value>' in str(verf_result[0])
    # parameters_environment pressure error
    assert '<error>CA15</error>' in str(verf_result[0])
    assert '<error>CA16</error>' in str(verf_result[0])
    assert '<error>CA17</error>' in str(verf_result[0])
    assert '<error>CA18</error>' in str(verf_result[0])
    assert '<error>CA19</error>' in str(verf_result[0])
    assert '<error>CA20</error>' in str(verf_result[0])
    assert '<error>CA25</error>' in str(verf_result[0])
    assert '<error>CA26</error>' in str(verf_result[0])
    assert '<error>CA31</error>' in str(verf_result[0])
    assert '<error>CA32</error>' in str(verf_result[0])
    assert '<error>CA37</error>' in str(verf_result[0])
    assert '<error>CA38</error>' in str(verf_result[0])
    assert '<error>CA41</error>' in str(verf_result[0])
    assert '<error>CA45</error>' in str(verf_result[0])
    assert '<error>CA53</error>' in str(verf_result[0])
    # parameters_environment pressure formation
    assert '<formation>CB15</formation>' in str(verf_result[0])
    assert '<formation>CB16</formation>' in str(verf_result[0])
    assert '<formation>CB17</formation>' in str(verf_result[0])
    assert '<formation>CB18</formation>' in str(verf_result[0])
    assert '<formation>CB19</formation>' in str(verf_result[0])
    assert '<formation>CB20</formation>' in str(verf_result[0])
    assert '<formation>CB25</formation>' in str(verf_result[0])
    assert '<formation>CB26</formation>' in str(verf_result[0])
    assert '<formation>CB31</formation>' in str(verf_result[0])
    assert '<formation>CB32</formation>' in str(verf_result[0])
    assert '<formation>CB37</formation>' in str(verf_result[0])
    assert '<formation>CB38</formation>' in str(verf_result[0])
    assert '<formation>CB41</formation>' in str(verf_result[0])
    assert '<formation>CB45</formation>' in str(verf_result[0])
    assert '<formation>CB53</formation>' in str(verf_result[0])
    # parameters_environment pressure max
    assert '<max>CC15</max>' in str(verf_result[0])
    assert '<max>CC16</max>' in str(verf_result[0])
    assert '<max>CC17</max>' in str(verf_result[0])
    assert '<max>CC18</max>' in str(verf_result[0])
    assert '<max>CC19</max>' in str(verf_result[0])
    assert '<max>CC20</max>' in str(verf_result[0])
    assert '<max>CC25</max>' in str(verf_result[0])
    assert '<max>CC26</max>' in str(verf_result[0])
    assert '<max>CC31</max>' in str(verf_result[0])
    assert '<max>CC32</max>' in str(verf_result[0])
    assert '<max>CC37</max>' in str(verf_result[0])
    assert '<max>CC38</max>' in str(verf_result[0])
    assert '<max>CC41</max>' in str(verf_result[0])
    assert '<max>CC45</max>' in str(verf_result[0])
    assert '<max>CC53</max>' in str(verf_result[0])
    # parameters_environment pressure stress_type
    assert '<stress_type></stress_type>' in str(verf_result[0])
    assert '<stress_type>normal uniaxial tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>normal uniaxial compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>simple shear</stress_type>' in str(verf_result[0])
    assert '<stress_type>normal biaxial tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>normal biaxial compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>cylindrical normal tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>cylindrical normal compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>isotropic normal tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>isotropic normal compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>combined biaxial</stress_type>' in str(verf_result[0])
    assert '<stress_type>combined triaxial</stress_type>' in str(verf_result[0])
    assert '<stress_type>other</stress_type>' in str(verf_result[0])
    assert '<stress_type>unknown</stress_type>' in str(verf_result[0])
    # parameters_environment pressure comments
    assert '<comments>CE15</comments>' in str(verf_result[0])
    assert '<comments>CE16</comments>' in str(verf_result[0])
    assert '<comments>CE17</comments>' in str(verf_result[0])
    assert '<comments>CE18</comments>' in str(verf_result[0])
    assert '<comments>CE19</comments>' in str(verf_result[0])
    assert '<comments>CE20</comments>' in str(verf_result[0])
    assert '<comments>CE25</comments>' in str(verf_result[0])
    assert '<comments>CE26</comments>' in str(verf_result[0])
    assert '<comments>CE31</comments>' in str(verf_result[0])
    assert '<comments>CE32</comments>' in str(verf_result[0])
    assert '<comments>CE37</comments>' in str(verf_result[0])
    assert '<comments>CE38</comments>' in str(verf_result[0])
    assert '<comments>CE41</comments>' in str(verf_result[0])
    assert '<comments>CE45</comments>' in str(verf_result[0])
    assert '<comments>CE53</comments>' in str(verf_result[0])
    # <!-- BAND: EXCITATION LIGHT -->
    # excitation laser_wavelength
    assert '<laser_wavelength>CG15</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG16</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG17</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG18</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG19</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG20</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG25</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG26</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG31</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG32</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG37</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG38</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG41</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG45</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG53</laser_wavelength>' in str(verf_result[0])
    # excitation sample_orientation_mode
    assert '<sample_orientation_mode></sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>oriented</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>unoriented</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>random</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>unknown</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>NULL</sample_orientation_mode>' in str(verf_result[0])
    # excitation sample_orientation
    assert '<sample_orientation>CI15</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI16</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI17</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI18</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI19</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI20</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI25</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI26</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI31</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI32</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI37</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI38</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI41</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI45</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI53</sample_orientation>' in str(verf_result[0])
    # excitation polarization_orientation_mode
    assert '<polarization_orientation_mode></polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>depolarized</polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>polarized</polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>unknown</polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>NULL</polarization_orientation_mode>' in str(verf_result[0])
    # excitation polarization_orientation
    assert '<polarization_orientation>CK15</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK16</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK17</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK18</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK19</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK20</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK25</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK26</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK31</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK32</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK37</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK38</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK41</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK45</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK53</polarization_orientation>' in str(verf_result[0])
    # excitation comments
    assert '<comments>CL15</comments>' in str(verf_result[0])
    assert '<comments>CL16</comments>' in str(verf_result[0])
    assert '<comments>CL17</comments>' in str(verf_result[0])
    assert '<comments>CL18</comments>' in str(verf_result[0])
    assert '<comments>CL19</comments>' in str(verf_result[0])
    assert '<comments>CL20</comments>' in str(verf_result[0])
    assert '<comments>CL25</comments>' in str(verf_result[0])
    assert '<comments>CL26</comments>' in str(verf_result[0])
    assert '<comments>CL31</comments>' in str(verf_result[0])
    assert '<comments>CL32</comments>' in str(verf_result[0])
    assert '<comments>CL37</comments>' in str(verf_result[0])
    assert '<comments>CL38</comments>' in str(verf_result[0])
    assert '<comments>CL41</comments>' in str(verf_result[0])
    assert '<comments>CL45</comments>' in str(verf_result[0])
    assert '<comments>CL53</comments>' in str(verf_result[0])
    # <!-- BAND: CHARACTERISTICS METHODS -->
    # methods method type
    assert '<type></type>' in str(verf_result[0])
    assert '<type>spectrum measurement</type>' in str(verf_result[0])
    assert '<type>spectrum fit</type>' in str(verf_result[0])
    assert '<type>spectrum analysis</type>' in str(verf_result[0])
    assert '<type>data compilation</type>' in str(verf_result[0])
    assert '<type>data extrapolation</type>' in str(verf_result[0])
    assert '<type>theory</type>' in str(verf_result[0])
    assert '<type>estimation</type>' in str(verf_result[0])
    assert '<type>various</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    # methods method description
    assert '<description>CP15</description>' in str(verf_result[0])
    assert '<description>CP16</description>' in str(verf_result[0])
    assert '<description>CP17</description>' in str(verf_result[0])
    assert '<description>CP18</description>' in str(verf_result[0])
    assert '<description>CP19</description>' in str(verf_result[0])
    assert '<description>CP20</description>' in str(verf_result[0])
    assert '<description>CP25</description>' in str(verf_result[0])
    assert '<description>CP26</description>' in str(verf_result[0])
    assert '<description>CP31</description>' in str(verf_result[0])
    assert '<description>CP32</description>' in str(verf_result[0])
    assert '<description>CP37</description>' in str(verf_result[0])
    assert '<description>CP38</description>' in str(verf_result[0])
    assert '<description>CP41</description>' in str(verf_result[0])
    assert '<description>CP45</description>' in str(verf_result[0])
    assert '<description>CP53</description>' in str(verf_result[0])
    # methods method fit_function type
    assert '<type></type>' in str(verf_result[0])
    assert '<type>Gaussian</type>' in str(verf_result[0])
    assert '<type>Voigt</type>' in str(verf_result[0])
    assert '<type>Voigt</type>' in str(verf_result[0])
    assert '<type>Lorentzian</type>' in str(verf_result[0])
    assert '<type>BWF</type>' in str(verf_result[0])
    assert '<type>Doppler</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    # methods method fit_function parameters
    assert '<parameters></parameters>' in str(verf_result[0])
    assert '<parameters>CR15</parameters>' in str(verf_result[0])
    assert '<parameters>CR16</parameters>' in str(verf_result[0])
    assert '<parameters>CR17</parameters>' in str(verf_result[0])
    assert '<parameters>CR18</parameters>' in str(verf_result[0])
    assert '<parameters>CR19</parameters>' in str(verf_result[0])
    assert '<parameters>CR20</parameters>' in str(verf_result[0])
    assert '<parameters>CR22</parameters>' in str(verf_result[0])
    assert '<parameters>CR26</parameters>' in str(verf_result[0])
    assert '<parameters>CR31</parameters>' in str(verf_result[0])
    assert '<parameters>CR37</parameters>' in str(verf_result[0])
    assert '<parameters>CR38</parameters>' in str(verf_result[0])
    assert '<parameters>CR41</parameters>' in str(verf_result[0])
    assert '<parameters>CR42</parameters>' in str(verf_result[0])
    assert '<parameters>CR44</parameters>' in str(verf_result[0])
    assert '<parameters>CR45</parameters>' in str(verf_result[0])
    assert '<parameters>CR48</parameters>' in str(verf_result[0])
    assert '<parameters>CR49</parameters>' in str(verf_result[0])
    assert '<parameters>CR53</parameters>' in str(verf_result[0])
    # <!-- BAND OVERLAP -->
    # overlap
    assert '<overlap></overlap>' in str(verf_result[0])
    assert '<overlap>extracted</overlap>' in str(verf_result[0])
    assert '<overlap>isolated</overlap>' in str(verf_result[0])
    assert '<overlap>slightly blended</overlap>' in str(verf_result[0])
    assert '<overlap>moderately blended</overlap>' in str(verf_result[0])
    assert '<overlap>strongly blended</overlap>' in str(verf_result[0])
    assert '<overlap>multiple</overlap>' in str(verf_result[0])
    assert '<overlap>other</overlap>' in str(verf_result[0])
    assert '<overlap>NULL</overlap>' in str(verf_result[0])
    assert '<overlap>unknown</overlap>' in str(verf_result[0])
    # <!-- BAND POSITION -->
    # position peak_method
    assert '<peak_method></peak_method>' in str(verf_result[0])
    assert '<peak_method>peak</peak_method>' in str(verf_result[0])
    assert '<peak_method>fit peak</peak_method>' in str(verf_result[0])
    assert '<peak_method>90%-max center</peak_method>' in str(verf_result[0])
    assert '<peak_method>first derivativee</peak_method>' in str(verf_result[0])
    assert '<peak_method>second derivative</peak_method>' in str(verf_result[0])
    assert '<peak_method>higher order derivative</peak_method>' in str(verf_result[0])
    assert '<peak_method>extrapolated</peak_method>' in str(verf_result[0])
    assert '<peak_method>calculated</peak_method>' in str(verf_result[0])
    assert '<peak_method>estimated</peak_method>' in str(verf_result[0])
    assert '<peak_method>various</peak_method>' in str(verf_result[0])
    assert '<peak_method>unknown</peak_method>' in str(verf_result[0])
    # position peak
    assert '<peak></peak>' in str(verf_result[0])
    assert '<peak>CX15</peak>' in str(verf_result[0])
    assert '<peak>CX16</peak>' in str(verf_result[0])
    assert '<peak>CX17</peak>' in str(verf_result[0])
    assert '<peak>CX18</peak>' in str(verf_result[0])
    assert '<peak>CX19</peak>' in str(verf_result[0])
    assert '<peak>CX20</peak>' in str(verf_result[0])
    assert '<peak>CX25</peak>' in str(verf_result[0])
    assert '<peak>CX26</peak>' in str(verf_result[0])
    assert '<peak>CX31</peak>' in str(verf_result[0])
    assert '<peak>CX32</peak>' in str(verf_result[0])
    assert '<peak>CX37</peak>' in str(verf_result[0])
    assert '<peak>CX38</peak>' in str(verf_result[0])
    assert '<peak>CX41</peak>' in str(verf_result[0])
    assert '<peak>CX45</peak>' in str(verf_result[0])
    assert '<peak>CX53</peak>' in str(verf_result[0])
    # position peak_error
    assert '<peak_error></peak_error>' in str(verf_result[0])
    assert '<peak_error>CY15</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY16</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY17</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY18</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY19</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY20</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY25</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY26</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY31</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY32</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY37</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY38</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY41</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY45</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY53</peak_error>' in str(verf_result[0])
    # position center_method
    assert '<center_method></center_method>' in str(verf_result[0])
    assert '<center_method>half-max center</center_method>' in str(verf_result[0])
    assert '<center_method>fit center</center_method>' in str(verf_result[0])
    assert '<center_method>second derivative</center_method>' in str(verf_result[0])
    assert '<center_method>higher order derivative</center_method>' in str(verf_result[0])
    assert '<center_method>extrapolated</center_method>' in str(verf_result[0])
    assert '<center_method>calculated</center_method>' in str(verf_result[0])
    assert '<center_method>estimated</center_method>' in str(verf_result[0])
    assert '<center_method>various</center_method>' in str(verf_result[0])
    assert '<center_method>other</center_method>' in str(verf_result[0])
    assert '<center_method>unknown</center_method>' in str(verf_result[0])
    # position center
    assert '<center></center>' in str(verf_result[0])
    assert '<center>DA15</center>' in str(verf_result[0])
    assert '<center>DA16</center>' in str(verf_result[0])
    assert '<center>DA17</center>' in str(verf_result[0])
    assert '<center>DA18</center>' in str(verf_result[0])
    assert '<center>DA19</center>' in str(verf_result[0])
    assert '<center>DA20</center>' in str(verf_result[0])
    assert '<center>DA25</center>' in str(verf_result[0])
    assert '<center>DA26</center>' in str(verf_result[0])
    assert '<center>DA31</center>' in str(verf_result[0])
    assert '<center>DA32</center>' in str(verf_result[0])
    assert '<center>DA37</center>' in str(verf_result[0])
    assert '<center>DA38</center>' in str(verf_result[0])
    assert '<center>DA41</center>' in str(verf_result[0])
    assert '<center>DA45</center>' in str(verf_result[0])
    assert '<center>DA53</center>' in str(verf_result[0])
    # position center_error
    assert '<center_error></center_error>' in str(verf_result[0])
    assert '<center_error>DB15</center_error>' in str(verf_result[0])
    assert '<center_error>DB16</center_error>' in str(verf_result[0])
    assert '<center_error>DB17</center_error>' in str(verf_result[0])
    assert '<center_error>DB18</center_error>' in str(verf_result[0])
    assert '<center_error>DB19</center_error>' in str(verf_result[0])
    assert '<center_error>DB20</center_error>' in str(verf_result[0])
    assert '<center_error>DB25</center_error>' in str(verf_result[0])
    assert '<center_error>DB26</center_error>' in str(verf_result[0])
    assert '<center_error>DB31</center_error>' in str(verf_result[0])
    assert '<center_error>DB32</center_error>' in str(verf_result[0])
    assert '<center_error>DB37</center_error>' in str(verf_result[0])
    assert '<center_error>DB38</center_error>' in str(verf_result[0])
    assert '<center_error>DB41</center_error>' in str(verf_result[0])
    assert '<center_error>DB45</center_error>' in str(verf_result[0])
    assert '<center_error>DB53</center_error>' in str(verf_result[0])
    # position evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    # position comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>DD15</comments>' in str(verf_result[0])
    assert '<comments>DD16</comments>' in str(verf_result[0])
    assert '<comments>DD17</comments>' in str(verf_result[0])
    assert '<comments>DD18</comments>' in str(verf_result[0])
    assert '<comments>DD19</comments>' in str(verf_result[0])
    assert '<comments>DD20</comments>' in str(verf_result[0])
    assert '<comments>DD25</comments>' in str(verf_result[0])
    assert '<comments>DD26</comments>' in str(verf_result[0])
    assert '<comments>DD31</comments>' in str(verf_result[0])
    assert '<comments>DD32</comments>' in str(verf_result[0])
    assert '<comments>DD37</comments>' in str(verf_result[0])
    assert '<comments>DD38</comments>' in str(verf_result[0])
    assert '<comments>DD41</comments>' in str(verf_result[0])
    assert '<comments>DD45</comments>' in str(verf_result[0])
    assert '<comments>DD53</comments>' in str(verf_result[0])
    # <!-- BAND WIDTH -->
    # width method
    assert '<method></method>' in str(verf_result[0])
    assert '<method>fit fwhm</method>' in str(verf_result[0])
    assert '<method>hwhm</method>' in str(verf_result[0])
    assert '<method>first derivative</method>' in str(verf_result[0])
    assert '<method>extrapolated</method>' in str(verf_result[0])
    assert '<method>calculated</method>' in str(verf_result[0])
    assert '<method>estimated</method>' in str(verf_result[0])
    assert '<method>various</method>' in str(verf_result[0])
    assert '<method>other</method>' in str(verf_result[0])
    assert '<method>unknown</method>' in str(verf_result[0])
    assert '<method>NULL</method>' in str(verf_result[0])
    # width fwhm
    assert '<fwhm></fwhm>' in str(verf_result[0])
    assert '<fwhm>DH15</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH16</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH17</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH18</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH19</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH20</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH25</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH26</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH31</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH32</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH37</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH38</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH41</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH45</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH53</fwhm>' in str(verf_result[0])
    # width fwhm_error
    assert '<fwhm_error></fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI15</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI16</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI17</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI18</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI19</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI20</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI25</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI26</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI31</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI32</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI37</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI38</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI41</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI45</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI53</fwhm_error>' in str(verf_result[0])
    # width shape
    assert '<shape></shape>' in str(verf_result[0])
    assert '<shape>symmetric</shape>' in str(verf_result[0])
    assert '<shape>gaussian</shape>' in str(verf_result[0])
    assert '<shape>lorentzian</shape>' in str(verf_result[0])
    assert '<shape>voigt</shape>' in str(verf_result[0])
    assert '<shape>doppler</shape>' in str(verf_result[0])
    assert '<shape>asymmetric</shape>' in str(verf_result[0])
    assert '<shape>asymmetric low frequency wing</shape>' in str(verf_result[0])
    assert '<shape>asymmetric high frequency wing</shape>' in str(verf_result[0])
    assert '<shape>shoulder</shape>' in str(verf_result[0])
    assert '<shape>sharp shoulder</shape>' in str(verf_result[0])
    assert '<shape>broad shoulder</shape>' in str(verf_result[0])
    assert '<shape>low frequency tail</shape>' in str(verf_result[0])
    assert '<shape>undefined</shape>' in str(verf_result[0])
    # width asymmetry_factor
    assert '<asymmetry_factor></asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK15</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK16</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK17</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK18</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK19</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK20</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK25</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK26</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK31</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK32</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK37</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK38</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK41</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK45</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK53</asymmetry_factor>' in str(verf_result[0])
    # width asymmetry_factor_error
    assert '<asymmetry_factor_error></asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL15</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL16</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL17</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL18</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL19</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL20</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL25</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL26</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL31</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL32</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL37</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL38</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL41</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL45</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL53</asymmetry_factor_error>' in str(verf_result[0])
    # width evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # width comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>DN15</comments>' in str(verf_result[0])
    assert '<comments>DN16</comments>' in str(verf_result[0])
    assert '<comments>DN17</comments>' in str(verf_result[0])
    assert '<comments>DN18</comments>' in str(verf_result[0])
    assert '<comments>DN19</comments>' in str(verf_result[0])
    assert '<comments>DN20</comments>' in str(verf_result[0])
    assert '<comments>DN25</comments>' in str(verf_result[0])
    assert '<comments>DN26</comments>' in str(verf_result[0])
    assert '<comments>DN31</comments>' in str(verf_result[0])
    assert '<comments>DN32</comments>' in str(verf_result[0])
    assert '<comments>DN37</comments>' in str(verf_result[0])
    assert '<comments>DN38</comments>' in str(verf_result[0])
    assert '<comments>DN41</comments>' in str(verf_result[0])
    assert '<comments>DN45</comments>' in str(verf_result[0])
    assert '<comments>DN53</comments>' in str(verf_result[0])
    # <!-- BAND INTENSITY -->
    # peak_intensity method
    assert '<method></method>' in str(verf_result[0])
    assert '<method>baseline corrected peak intensity</method>' in str(verf_result[0])
    assert '<method>peak intensity</method>' in str(verf_result[0])
    assert '<method>fit intensity</method>' in str(verf_result[0])
    assert '<method>extrapolated</method>' in str(verf_result[0])
    assert '<method>calculated</method>' in str(verf_result[0])
    assert '<method>estimated</method>' in str(verf_result[0])
    assert '<method>various</method>' in str(verf_result[0])
    assert '<method>other</method>' in str(verf_result[0])
    assert '<method>unknown</method>' in str(verf_result[0])
    assert '<method>NULL</method>' in str(verf_result[0])
    # width abscoef
    assert '<abscoef></abscoef>' in str(verf_result[0])
    assert '<abscoef>DR15</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR16</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR17</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR18</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR19</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR20</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR25</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR26</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR31</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR32</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR37</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR38</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR41</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR45</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR53</abscoef>' in str(verf_result[0])
    # width abscoef_error
    assert '<abscoef_error></abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS15</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS16</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS17</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS18</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS19</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS20</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS25</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS26</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS31</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS32</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS37</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS38</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS41</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS45</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS53</abscoef_error>' in str(verf_result[0])
    # width abscoef_specific
    assert '<abscoef_specific></abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT15</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT16</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT17</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT18</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT19</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT20</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT25</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT26</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT31</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT32</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT37</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT38</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT41</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT45</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT53</abscoef_specific>' in str(verf_result[0])
    # width abscoef_specific_error
    assert '<abscoef_specific_error></abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU15</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU16</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU17</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU18</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU19</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU20</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU25</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU26</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU31</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU32</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU37</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU38</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU41</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU45</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU53</abscoef_specific_error>' in str(verf_result[0])
    # width relative
    assert '<relative></relative>' in str(verf_result[0])
    assert '<relative>DV15</relative>' in str(verf_result[0])
    assert '<relative>DV16</relative>' in str(verf_result[0])
    assert '<relative>DV17</relative>' in str(verf_result[0])
    assert '<relative>DV18</relative>' in str(verf_result[0])
    assert '<relative>DV19</relative>' in str(verf_result[0])
    assert '<relative>DV20</relative>' in str(verf_result[0])
    assert '<relative>DV25</relative>' in str(verf_result[0])
    assert '<relative>DV26</relative>' in str(verf_result[0])
    assert '<relative>DV31</relative>' in str(verf_result[0])
    assert '<relative>DV32</relative>' in str(verf_result[0])
    assert '<relative>DV37</relative>' in str(verf_result[0])
    assert '<relative>DV38</relative>' in str(verf_result[0])
    assert '<relative>DV41</relative>' in str(verf_result[0])
    assert '<relative>DV45</relative>' in str(verf_result[0])
    assert '<relative>DV53</relative>' in str(verf_result[0])
    # width relative_error
    assert '<relative_error></relative_error>' in str(verf_result[0])
    assert '<relative_error>DW15</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW16</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW17</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW18</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW19</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW20</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW25</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW26</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW31</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW32</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW37</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW38</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW41</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW45</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW53</relative_error>' in str(verf_result[0])
    # width strength
    assert '<strength></strength>' in str(verf_result[0])
    assert '<strength>ia</strength>' in str(verf_result[0])
    assert '<strength>ew</strength>' in str(verf_result[0])
    assert '<strength>vvw</strength>' in str(verf_result[0])
    assert '<strength>vw</strength>' in str(verf_result[0])
    assert '<strength>w</strength>' in str(verf_result[0])
    assert '<strength>m</strength>' in str(verf_result[0])
    assert '<strength>s</strength>' in str(verf_result[0])
    assert '<strength>vs</strength>' in str(verf_result[0])
    assert '<strength>vvs</strength>' in str(verf_result[0])
    assert '<strength>es</strength>' in str(verf_result[0])
    assert '<strength>unknown</strength>' in str(verf_result[0])
    assert '<strength>NULL</strength>' in str(verf_result[0])
    # width evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # width comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>EB15</comments>' in str(verf_result[0])
    assert '<comments>EB16</comments>' in str(verf_result[0])
    assert '<comments>EB17</comments>' in str(verf_result[0])
    assert '<comments>EB18</comments>' in str(verf_result[0])
    assert '<comments>EB19</comments>' in str(verf_result[0])
    assert '<comments>EB20</comments>' in str(verf_result[0])
    assert '<comments>EB25</comments>' in str(verf_result[0])
    assert '<comments>EB26</comments>' in str(verf_result[0])
    assert '<comments>EB31</comments>' in str(verf_result[0])
    assert '<comments>EB32</comments>' in str(verf_result[0])
    assert '<comments>EB37</comments>' in str(verf_result[0])
    assert '<comments>EB38</comments>' in str(verf_result[0])
    assert '<comments>EB41</comments>' in str(verf_result[0])
    assert '<comments>EB45</comments>' in str(verf_result[0])
    assert '<comments>EB53</comments>' in str(verf_result[0])
    # <!-- BAND INTEGRATED INTENSITY -->
    # peak_intensity method
    assert '<method></method>' in str(verf_result[0])
    assert '<method>band integrated intensity</method>' in str(verf_result[0])
    assert '<method>width x peak intensity</method>' in str(verf_result[0])
    assert '<method>fit integrated intensity</method>' in str(verf_result[0])
    assert '<method>extrapolated</method>' in str(verf_result[0])
    assert '<method>calculated</method>' in str(verf_result[0])
    assert '<method>estimated</method>' in str(verf_result[0])
    assert '<method>various</method>' in str(verf_result[0])
    assert '<method>other</method>' in str(verf_result[0])
    assert '<method>unknown</method>' in str(verf_result[0])
    assert '<method>NULL</method>' in str(verf_result[0])
    # width abscoef
    assert '<abscoef></abscoef>' in str(verf_result[0])
    assert '<abscoef>EF15</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF16</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF17</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF18</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF19</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF20</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF25</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF26</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF31</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF32</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF37</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF38</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF41</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF45</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF53</abscoef>' in str(verf_result[0])
    # width abscoef_error
    assert '<abscoef_error></abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG15</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG16</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG17</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG18</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG19</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG20</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG25</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG26</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG31</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG32</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG37</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG38</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG41</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG45</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG53</abscoef_error>' in str(verf_result[0])
    # width abscoef_specific
    assert '<abscoef_specific></abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH15</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH16</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH17</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH18</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH19</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH20</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH25</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH26</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH31</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH32</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH37</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH38</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH41</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH45</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH53</abscoef_specific>' in str(verf_result[0])
    # width abscoef_specific_error
    assert '<abscoef_specific_error></abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI15</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI16</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI17</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI18</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI19</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI20</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI25</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI26</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI31</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI32</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI37</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI38</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI41</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI45</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI53</abscoef_specific_error>' in str(verf_result[0])
    # width relative
    assert '<relative></relative>' in str(verf_result[0])
    assert '<relative>EJ15</relative>' in str(verf_result[0])
    assert '<relative>EJ16</relative>' in str(verf_result[0])
    assert '<relative>EJ17</relative>' in str(verf_result[0])
    assert '<relative>EJ18</relative>' in str(verf_result[0])
    assert '<relative>EJ19</relative>' in str(verf_result[0])
    assert '<relative>EJ20</relative>' in str(verf_result[0])
    assert '<relative>EJ25</relative>' in str(verf_result[0])
    assert '<relative>EJ26</relative>' in str(verf_result[0])
    assert '<relative>EJ31</relative>' in str(verf_result[0])
    assert '<relative>EJ32</relative>' in str(verf_result[0])
    assert '<relative>EJ37</relative>' in str(verf_result[0])
    assert '<relative>EJ38</relative>' in str(verf_result[0])
    assert '<relative>EJ41</relative>' in str(verf_result[0])
    assert '<relative>EJ45</relative>' in str(verf_result[0])
    assert '<relative>EJ53</relative>' in str(verf_result[0])
    # width relative_error
    assert '<relative_error></relative_error>' in str(verf_result[0])
    assert '<relative_error>EK15</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK16</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK17</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK18</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK19</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK20</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK25</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK26</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK31</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK32</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK37</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK38</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK41</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK45</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK53</relative_error>' in str(verf_result[0])
    # width strength
    assert '<strength></strength>' in str(verf_result[0])
    assert '<strength>ia</strength>' in str(verf_result[0])
    assert '<strength>ew</strength>' in str(verf_result[0])
    assert '<strength>vvw</strength>' in str(verf_result[0])
    assert '<strength>vw</strength>' in str(verf_result[0])
    assert '<strength>w</strength>' in str(verf_result[0])
    assert '<strength>m</strength>' in str(verf_result[0])
    assert '<strength>s</strength>' in str(verf_result[0])
    assert '<strength>vs</strength>' in str(verf_result[0])
    assert '<strength>vvs</strength>' in str(verf_result[0])
    assert '<strength>es</strength>' in str(verf_result[0])
    assert '<strength>unknown</strength>' in str(verf_result[0])
    assert '<strength>NULL</strength>' in str(verf_result[0])
    # width evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # width comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>EP15</comments>' in str(verf_result[0])
    assert '<comments>EP16</comments>' in str(verf_result[0])
    assert '<comments>EP17</comments>' in str(verf_result[0])
    assert '<comments>EP18</comments>' in str(verf_result[0])
    assert '<comments>EP19</comments>' in str(verf_result[0])
    assert '<comments>EP20</comments>' in str(verf_result[0])
    assert '<comments>EP25</comments>' in str(verf_result[0])
    assert '<comments>EP26</comments>' in str(verf_result[0])
    assert '<comments>EP31</comments>' in str(verf_result[0])
    assert '<comments>EP32</comments>' in str(verf_result[0])
    assert '<comments>EP37</comments>' in str(verf_result[0])
    assert '<comments>EP38</comments>' in str(verf_result[0])
    assert '<comments>EP41</comments>' in str(verf_result[0])
    assert '<comments>EP45</comments>' in str(verf_result[0])
    assert '<comments>EP53</comments>' in str(verf_result[0])
    # <!-- BAND: BANDLIST PREVIEW -->
    # width bandlist_nominal_flag
    assert '<bandlist_nominal_flag></bandlist_nominal_flag>' in str(verf_result[0])
    assert '<bandlist_nominal_flag>yes</bandlist_nominal_flag>' in str(verf_result[0])
    assert '<bandlist_nominal_flag>no</bandlist_nominal_flag>' in str(verf_result[0])
    # no empty tags
    assert str(verf_result[0]).find('/>') == -1
    # qtys
    assert str(verf_result[0]).count("<characteristics>") == 3
    assert str(verf_result[0]).count("<characteristic>") == 16
    assert str(verf_result[0]).count("<constituent>") == 16 + 1
    assert str(verf_result[0]).count("<composition_comments>") == 16
    assert str(verf_result[0]).count("<texture_comments>") == 16
    assert str(verf_result[0]).count("<parameters_environment>") == 16
    assert str(verf_result[0]).count("<temperature>") == 16
    assert str(verf_result[0]).count("<pressure>") == 16
    assert str(verf_result[0]).count("<excitation>") == 16
    assert str(verf_result[0]).count("<methods>") == 16
    assert str(verf_result[0]).count("<fit_function>") == 23
    assert str(verf_result[0]).count("<parameters>") == 23
    assert str(verf_result[0]).count("<overlap>") == 16
    assert str(verf_result[0]).count("<position>") == 16
    assert str(verf_result[0]).count("<peak_method>") == 16
    assert str(verf_result[0]).count("<peak>") == 16
    assert str(verf_result[0]).count("<peak_error>") == 16
    assert str(verf_result[0]).count("<center_method>") == 16
    assert str(verf_result[0]).count("<width>") == 16
    assert str(verf_result[0]).count("<fwhm>") == 16
    assert str(verf_result[0]).count("<fwhm_error>") == 16
    assert str(verf_result[0]).count("<shape>") == 16
    assert str(verf_result[0]).count("<asymmetry_factor>") == 16
    assert str(verf_result[0]).count("<asymmetry_factor_error>") == 16
    assert str(verf_result[0]).count("<peak_intensity>") == 16
    assert str(verf_result[0]).count("<integrated_intensity>") == 16
    assert str(verf_result[0]).count("<abscoef>") == 16 * 2
    assert str(verf_result[0]).count("<abscoef_error>") == 16 * 2
    assert str(verf_result[0]).count("<abscoef_specific>") == 16 * 2
    assert str(verf_result[0]).count("<abscoef_specific_error>") == 16 * 2
    assert str(verf_result[0]).count("<relative>") == 16 * 2
    assert str(verf_result[0]).count("<relative_error>") == 16 * 2
    assert str(verf_result[0]).count("<strength>") == 16 * 2
    assert str(verf_result[0]).count("<bandlist_nominal_flag>") == 16
    # Abs
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_characteristic_abs.xlsx", "ABS")
    file_save(verf_result[0])
    # number
    assert '<number>1</number>' in str(verf_result[0])
    assert '<number>2</number>' in str(verf_result[0])
    assert '<number>3</number>' in str(verf_result[0])
    assert '<number>4</number>' in str(verf_result[0])
    assert '<number>5</number>' in str(verf_result[0])
    assert '<number>6</number>' in str(verf_result[0])
    assert '<number>7</number>' in str(verf_result[0])
    assert '<number>8</number>' in str(verf_result[0])
    assert '<number>9</number>' in str(verf_result[0])
    assert '<number>10</number>' in str(verf_result[0])
    # <!-- BAND: CONSTITUENT -->
    # constituent composition_comments
    assert '<composition_comments>BQ15</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ16</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ17</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ18</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ19</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ20</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ25</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ26</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ31</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ32</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ37</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ38</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ41</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ45</composition_comments>' in str(verf_result[0])
    assert '<composition_comments>BQ53</composition_comments>' in str(verf_result[0])
    # constituent texture_comments
    assert '<texture_comments>BR15</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR16</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR17</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR18</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR19</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR20</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR25</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR26</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR31</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR32</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR37</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR38</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR41</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR45</texture_comments>' in str(verf_result[0])
    assert '<texture_comments>BR53</texture_comments>' in str(verf_result[0])
    # <!-- BAND: CONSTITUENT ENVIRONMENT PARAMETERS -->
    # parameters_environment temperature unit
    assert '<unit>K</unit>' in str(verf_result[0])
    assert '<unit></unit>' in str(verf_result[0])
    # parameters_environment temperature value
    assert '<value>BT15</value>' in str(verf_result[0])
    assert '<value>BT16</value>' in str(verf_result[0])
    assert '<value>BT17</value>' in str(verf_result[0])
    assert '<value>BT18</value>' in str(verf_result[0])
    assert '<value>BT19</value>' in str(verf_result[0])
    assert '<value>BT20</value>' in str(verf_result[0])
    assert '<value>BT25</value>' in str(verf_result[0])
    assert '<value>BT26</value>' in str(verf_result[0])
    assert '<value>BT31</value>' in str(verf_result[0])
    assert '<value>BT32</value>' in str(verf_result[0])
    assert '<value>BT37</value>' in str(verf_result[0])
    assert '<value>BT38</value>' in str(verf_result[0])
    assert '<value>BT41</value>' in str(verf_result[0])
    assert '<value>BT45</value>' in str(verf_result[0])
    assert '<value>BT53</value>' in str(verf_result[0])
    # parameters_environment temperature error
    assert '<error>BU15</error>' in str(verf_result[0])
    assert '<error>BU16</error>' in str(verf_result[0])
    assert '<error>BU17</error>' in str(verf_result[0])
    assert '<error>BU18</error>' in str(verf_result[0])
    assert '<error>BU19</error>' in str(verf_result[0])
    assert '<error>BU20</error>' in str(verf_result[0])
    assert '<error>BU25</error>' in str(verf_result[0])
    assert '<error>BU26</error>' in str(verf_result[0])
    assert '<error>BU31</error>' in str(verf_result[0])
    assert '<error>BU32</error>' in str(verf_result[0])
    assert '<error>BU37</error>' in str(verf_result[0])
    assert '<error>BU38</error>' in str(verf_result[0])
    assert '<error>BU41</error>' in str(verf_result[0])
    assert '<error>BU45</error>' in str(verf_result[0])
    assert '<error>BU53</error>' in str(verf_result[0])
    # parameters_environment temperature formation
    assert '<formation>BV15</formation>' in str(verf_result[0])
    assert '<formation>BV16</formation>' in str(verf_result[0])
    assert '<formation>BV17</formation>' in str(verf_result[0])
    assert '<formation>BV18</formation>' in str(verf_result[0])
    assert '<formation>BV19</formation>' in str(verf_result[0])
    assert '<formation>BV20</formation>' in str(verf_result[0])
    assert '<formation>BV25</formation>' in str(verf_result[0])
    assert '<formation>BV26</formation>' in str(verf_result[0])
    assert '<formation>BV31</formation>' in str(verf_result[0])
    assert '<formation>BV32</formation>' in str(verf_result[0])
    assert '<formation>BV37</formation>' in str(verf_result[0])
    assert '<formation>BV38</formation>' in str(verf_result[0])
    assert '<formation>BV41</formation>' in str(verf_result[0])
    assert '<formation>BV45</formation>' in str(verf_result[0])
    assert '<formation>BV53</formation>' in str(verf_result[0])
    # parameters_environment temperature max
    assert '<max>BW15</max>' in str(verf_result[0])
    assert '<max>BW16</max>' in str(verf_result[0])
    assert '<max>BW17</max>' in str(verf_result[0])
    assert '<max>BW18</max>' in str(verf_result[0])
    assert '<max>BW19</max>' in str(verf_result[0])
    assert '<max>BW20</max>' in str(verf_result[0])
    assert '<max>BW25</max>' in str(verf_result[0])
    assert '<max>BW26</max>' in str(verf_result[0])
    assert '<max>BW31</max>' in str(verf_result[0])
    assert '<max>BW32</max>' in str(verf_result[0])
    assert '<max>BW37</max>' in str(verf_result[0])
    assert '<max>BW38</max>' in str(verf_result[0])
    assert '<max>BW41</max>' in str(verf_result[0])
    assert '<max>BW45</max>' in str(verf_result[0])
    assert '<max>BW53</max>' in str(verf_result[0])
    # parameters_environment temperature comments
    assert '<comments>BX15</comments>' in str(verf_result[0])
    assert '<comments>BX16</comments>' in str(verf_result[0])
    assert '<comments>BX17</comments>' in str(verf_result[0])
    assert '<comments>BX18</comments>' in str(verf_result[0])
    assert '<comments>BX19</comments>' in str(verf_result[0])
    assert '<comments>BX20</comments>' in str(verf_result[0])
    assert '<comments>BX25</comments>' in str(verf_result[0])
    assert '<comments>BX26</comments>' in str(verf_result[0])
    assert '<comments>BX31</comments>' in str(verf_result[0])
    assert '<comments>BX32</comments>' in str(verf_result[0])
    assert '<comments>BX37</comments>' in str(verf_result[0])
    assert '<comments>BX38</comments>' in str(verf_result[0])
    assert '<comments>BX41</comments>' in str(verf_result[0])
    assert '<comments>BX45</comments>' in str(verf_result[0])
    assert '<comments>BX53</comments>' in str(verf_result[0])
    # <!-- CONSTITUENT ENVIRONMENT: MECHANICAL PRESSURE APPLIED TO THE CONSTITUENT -->
    # parameters_environment pressure unit
    assert '<unit>bar</unit>' in str(verf_result[0])
    assert '<unit></unit>' in str(verf_result[0])
    # parameters_environment pressure value
    assert '<value>BZ15</value>' in str(verf_result[0])
    assert '<value>BZ16</value>' in str(verf_result[0])
    assert '<value>BZ17</value>' in str(verf_result[0])
    assert '<value>BZ18</value>' in str(verf_result[0])
    assert '<value>BZ19</value>' in str(verf_result[0])
    assert '<value>BZ20</value>' in str(verf_result[0])
    assert '<value>BZ25</value>' in str(verf_result[0])
    assert '<value>BZ26</value>' in str(verf_result[0])
    assert '<value>BZ31</value>' in str(verf_result[0])
    assert '<value>BZ32</value>' in str(verf_result[0])
    assert '<value>BZ37</value>' in str(verf_result[0])
    assert '<value>BZ38</value>' in str(verf_result[0])
    assert '<value>BZ41</value>' in str(verf_result[0])
    assert '<value>BZ45</value>' in str(verf_result[0])
    assert '<value>BZ53</value>' in str(verf_result[0])
    # parameters_environment pressure error
    assert '<error>CA15</error>' in str(verf_result[0])
    assert '<error>CA16</error>' in str(verf_result[0])
    assert '<error>CA17</error>' in str(verf_result[0])
    assert '<error>CA18</error>' in str(verf_result[0])
    assert '<error>CA19</error>' in str(verf_result[0])
    assert '<error>CA20</error>' in str(verf_result[0])
    assert '<error>CA25</error>' in str(verf_result[0])
    assert '<error>CA26</error>' in str(verf_result[0])
    assert '<error>CA31</error>' in str(verf_result[0])
    assert '<error>CA32</error>' in str(verf_result[0])
    assert '<error>CA37</error>' in str(verf_result[0])
    assert '<error>CA38</error>' in str(verf_result[0])
    assert '<error>CA41</error>' in str(verf_result[0])
    assert '<error>CA45</error>' in str(verf_result[0])
    assert '<error>CA53</error>' in str(verf_result[0])
    # parameters_environment pressure formation
    assert '<formation>CB15</formation>' in str(verf_result[0])
    assert '<formation>CB16</formation>' in str(verf_result[0])
    assert '<formation>CB17</formation>' in str(verf_result[0])
    assert '<formation>CB18</formation>' in str(verf_result[0])
    assert '<formation>CB19</formation>' in str(verf_result[0])
    assert '<formation>CB20</formation>' in str(verf_result[0])
    assert '<formation>CB25</formation>' in str(verf_result[0])
    assert '<formation>CB26</formation>' in str(verf_result[0])
    assert '<formation>CB31</formation>' in str(verf_result[0])
    assert '<formation>CB32</formation>' in str(verf_result[0])
    assert '<formation>CB37</formation>' in str(verf_result[0])
    assert '<formation>CB38</formation>' in str(verf_result[0])
    assert '<formation>CB41</formation>' in str(verf_result[0])
    assert '<formation>CB45</formation>' in str(verf_result[0])
    assert '<formation>CB53</formation>' in str(verf_result[0])
    # parameters_environment pressure max
    assert '<max>CC15</max>' in str(verf_result[0])
    assert '<max>CC16</max>' in str(verf_result[0])
    assert '<max>CC17</max>' in str(verf_result[0])
    assert '<max>CC18</max>' in str(verf_result[0])
    assert '<max>CC19</max>' in str(verf_result[0])
    assert '<max>CC20</max>' in str(verf_result[0])
    assert '<max>CC25</max>' in str(verf_result[0])
    assert '<max>CC26</max>' in str(verf_result[0])
    assert '<max>CC31</max>' in str(verf_result[0])
    assert '<max>CC32</max>' in str(verf_result[0])
    assert '<max>CC37</max>' in str(verf_result[0])
    assert '<max>CC38</max>' in str(verf_result[0])
    assert '<max>CC41</max>' in str(verf_result[0])
    assert '<max>CC45</max>' in str(verf_result[0])
    assert '<max>CC53</max>' in str(verf_result[0])
    # parameters_environment pressure stress_type
    assert '<stress_type></stress_type>' in str(verf_result[0])
    assert '<stress_type>normal uniaxial tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>normal uniaxial compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>simple shear</stress_type>' in str(verf_result[0])
    assert '<stress_type>normal biaxial tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>normal biaxial compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>cylindrical normal tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>cylindrical normal compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>isotropic normal tension</stress_type>' in str(verf_result[0])
    assert '<stress_type>isotropic normal compression</stress_type>' in str(verf_result[0])
    assert '<stress_type>combined biaxial</stress_type>' in str(verf_result[0])
    assert '<stress_type>combined triaxial</stress_type>' in str(verf_result[0])
    assert '<stress_type>other</stress_type>' in str(verf_result[0])
    assert '<stress_type>unknown</stress_type>' in str(verf_result[0])
    # parameters_environment pressure comments
    assert '<comments>CE15</comments>' in str(verf_result[0])
    assert '<comments>CE16</comments>' in str(verf_result[0])
    assert '<comments>CE17</comments>' in str(verf_result[0])
    assert '<comments>CE18</comments>' in str(verf_result[0])
    assert '<comments>CE19</comments>' in str(verf_result[0])
    assert '<comments>CE20</comments>' in str(verf_result[0])
    assert '<comments>CE25</comments>' in str(verf_result[0])
    assert '<comments>CE26</comments>' in str(verf_result[0])
    assert '<comments>CE31</comments>' in str(verf_result[0])
    assert '<comments>CE32</comments>' in str(verf_result[0])
    assert '<comments>CE37</comments>' in str(verf_result[0])
    assert '<comments>CE38</comments>' in str(verf_result[0])
    assert '<comments>CE41</comments>' in str(verf_result[0])
    assert '<comments>CE45</comments>' in str(verf_result[0])
    assert '<comments>CE53</comments>' in str(verf_result[0])
    # <!-- BAND: EXCITATION LIGHT -->
    # excitation laser_wavelength
    assert '<laser_wavelength>CG15</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG16</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG17</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG18</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG19</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG20</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG25</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG26</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG31</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG32</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG37</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG38</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG41</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG45</laser_wavelength>' in str(verf_result[0])
    assert '<laser_wavelength>CG53</laser_wavelength>' in str(verf_result[0])
    # excitation sample_orientation_mode
    assert '<sample_orientation_mode></sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>oriented</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>unoriented</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>random</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>unknown</sample_orientation_mode>' in str(verf_result[0])
    assert '<sample_orientation_mode>NULL</sample_orientation_mode>' in str(verf_result[0])
    # excitation sample_orientation
    assert '<sample_orientation>CI15</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI16</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI17</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI18</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI19</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI20</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI25</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI26</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI31</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI32</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI37</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI38</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI41</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI45</sample_orientation>' in str(verf_result[0])
    assert '<sample_orientation>CI53</sample_orientation>' in str(verf_result[0])
    # excitation polarization_orientation_mode
    assert '<polarization_orientation_mode></polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>depolarized</polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>polarized</polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>unknown</polarization_orientation_mode>' in str(verf_result[0])
    assert '<polarization_orientation_mode>NULL</polarization_orientation_mode>' in str(verf_result[0])
    # excitation polarization_orientation
    assert '<polarization_orientation>CK15</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK16</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK17</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK18</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK19</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK20</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK25</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK26</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK31</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK32</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK37</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK38</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK41</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK45</polarization_orientation>' in str(verf_result[0])
    assert '<polarization_orientation>CK53</polarization_orientation>' in str(verf_result[0])
    # excitation comments
    assert '<comments>CL15</comments>' in str(verf_result[0])
    assert '<comments>CL16</comments>' in str(verf_result[0])
    assert '<comments>CL17</comments>' in str(verf_result[0])
    assert '<comments>CL18</comments>' in str(verf_result[0])
    assert '<comments>CL19</comments>' in str(verf_result[0])
    assert '<comments>CL20</comments>' in str(verf_result[0])
    assert '<comments>CL25</comments>' in str(verf_result[0])
    assert '<comments>CL26</comments>' in str(verf_result[0])
    assert '<comments>CL31</comments>' in str(verf_result[0])
    assert '<comments>CL32</comments>' in str(verf_result[0])
    assert '<comments>CL37</comments>' in str(verf_result[0])
    assert '<comments>CL38</comments>' in str(verf_result[0])
    assert '<comments>CL41</comments>' in str(verf_result[0])
    assert '<comments>CL45</comments>' in str(verf_result[0])
    assert '<comments>CL53</comments>' in str(verf_result[0])
    # <!-- BAND: CHARACTERISTICS METHODS -->
    # methods method type
    assert '<type></type>' in str(verf_result[0])
    assert '<type>spectrum measurement</type>' in str(verf_result[0])
    assert '<type>spectrum fit</type>' in str(verf_result[0])
    assert '<type>spectrum analysis</type>' in str(verf_result[0])
    assert '<type>data compilation</type>' in str(verf_result[0])
    assert '<type>data extrapolation</type>' in str(verf_result[0])
    assert '<type>theory</type>' in str(verf_result[0])
    assert '<type>estimation</type>' in str(verf_result[0])
    assert '<type>various</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    assert '<type>NULL</type>' in str(verf_result[0])
    # methods method description
    assert '<description>CP15</description>' in str(verf_result[0])
    assert '<description>CP16</description>' in str(verf_result[0])
    assert '<description>CP17</description>' in str(verf_result[0])
    assert '<description>CP18</description>' in str(verf_result[0])
    assert '<description>CP19</description>' in str(verf_result[0])
    assert '<description>CP20</description>' in str(verf_result[0])
    assert '<description>CP25</description>' in str(verf_result[0])
    assert '<description>CP26</description>' in str(verf_result[0])
    assert '<description>CP31</description>' in str(verf_result[0])
    assert '<description>CP32</description>' in str(verf_result[0])
    assert '<description>CP37</description>' in str(verf_result[0])
    assert '<description>CP38</description>' in str(verf_result[0])
    assert '<description>CP41</description>' in str(verf_result[0])
    assert '<description>CP45</description>' in str(verf_result[0])
    assert '<description>CP53</description>' in str(verf_result[0])
    # methods method fit_function type
    assert '<type></type>' in str(verf_result[0])
    assert '<type>Gaussian</type>' in str(verf_result[0])
    assert '<type>Voigt</type>' in str(verf_result[0])
    assert '<type>Voigt</type>' in str(verf_result[0])
    assert '<type>Lorentzian</type>' in str(verf_result[0])
    assert '<type>BWF</type>' in str(verf_result[0])
    assert '<type>Doppler</type>' in str(verf_result[0])
    assert '<type>unknown</type>' in str(verf_result[0])
    assert '<type>other</type>' in str(verf_result[0])
    # methods method fit_function parameters
    assert '<parameters></parameters>' in str(verf_result[0])
    assert '<parameters>CR15</parameters>' in str(verf_result[0])
    assert '<parameters>CR16</parameters>' in str(verf_result[0])
    assert '<parameters>CR17</parameters>' in str(verf_result[0])
    assert '<parameters>CR18</parameters>' in str(verf_result[0])
    assert '<parameters>CR19</parameters>' in str(verf_result[0])
    assert '<parameters>CR20</parameters>' in str(verf_result[0])
    assert '<parameters>CR22</parameters>' in str(verf_result[0])
    assert '<parameters>CR26</parameters>' in str(verf_result[0])
    assert '<parameters>CR31</parameters>' in str(verf_result[0])
    assert '<parameters>CR37</parameters>' in str(verf_result[0])
    assert '<parameters>CR38</parameters>' in str(verf_result[0])
    assert '<parameters>CR41</parameters>' in str(verf_result[0])
    assert '<parameters>CR42</parameters>' in str(verf_result[0])
    assert '<parameters>CR44</parameters>' in str(verf_result[0])
    assert '<parameters>CR45</parameters>' in str(verf_result[0])
    assert '<parameters>CR48</parameters>' in str(verf_result[0])
    assert '<parameters>CR49</parameters>' in str(verf_result[0])
    assert '<parameters>CR53</parameters>' in str(verf_result[0])
    # <!-- BAND OVERLAP -->
    # overlap
    assert '<overlap></overlap>' in str(verf_result[0])
    assert '<overlap>extracted</overlap>' in str(verf_result[0])
    assert '<overlap>isolated</overlap>' in str(verf_result[0])
    assert '<overlap>slightly blended</overlap>' in str(verf_result[0])
    assert '<overlap>moderately blended</overlap>' in str(verf_result[0])
    assert '<overlap>strongly blended</overlap>' in str(verf_result[0])
    assert '<overlap>multiple</overlap>' in str(verf_result[0])
    assert '<overlap>other</overlap>' in str(verf_result[0])
    assert '<overlap>NULL</overlap>' in str(verf_result[0])
    assert '<overlap>unknown</overlap>' in str(verf_result[0])
    # <!-- BAND POSITION -->
    # position peak_method
    assert '<peak_method></peak_method>' in str(verf_result[0])
    assert '<peak_method>peak</peak_method>' in str(verf_result[0])
    assert '<peak_method>fit peak</peak_method>' in str(verf_result[0])
    assert '<peak_method>90%-max center</peak_method>' in str(verf_result[0])
    assert '<peak_method>first derivativee</peak_method>' in str(verf_result[0])
    assert '<peak_method>second derivative</peak_method>' in str(verf_result[0])
    assert '<peak_method>higher order derivative</peak_method>' in str(verf_result[0])
    assert '<peak_method>extrapolated</peak_method>' in str(verf_result[0])
    assert '<peak_method>calculated</peak_method>' in str(verf_result[0])
    assert '<peak_method>estimated</peak_method>' in str(verf_result[0])
    assert '<peak_method>various</peak_method>' in str(verf_result[0])
    assert '<peak_method>unknown</peak_method>' in str(verf_result[0])
    # position peak
    assert '<peak></peak>' in str(verf_result[0])
    assert '<peak>CX15</peak>' in str(verf_result[0])
    assert '<peak>CX16</peak>' in str(verf_result[0])
    assert '<peak>CX17</peak>' in str(verf_result[0])
    assert '<peak>CX18</peak>' in str(verf_result[0])
    assert '<peak>CX19</peak>' in str(verf_result[0])
    assert '<peak>CX20</peak>' in str(verf_result[0])
    assert '<peak>CX25</peak>' in str(verf_result[0])
    assert '<peak>CX26</peak>' in str(verf_result[0])
    assert '<peak>CX31</peak>' in str(verf_result[0])
    assert '<peak>CX32</peak>' in str(verf_result[0])
    assert '<peak>CX37</peak>' in str(verf_result[0])
    assert '<peak>CX38</peak>' in str(verf_result[0])
    assert '<peak>CX41</peak>' in str(verf_result[0])
    assert '<peak>CX45</peak>' in str(verf_result[0])
    assert '<peak>CX53</peak>' in str(verf_result[0])
    # position peak_error
    assert '<peak_error></peak_error>' in str(verf_result[0])
    assert '<peak_error>CY15</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY16</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY17</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY18</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY19</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY20</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY25</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY26</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY31</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY32</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY37</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY38</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY41</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY45</peak_error>' in str(verf_result[0])
    assert '<peak_error>CY53</peak_error>' in str(verf_result[0])
    # position center_method
    assert '<center_method></center_method>' in str(verf_result[0])
    assert '<center_method>half-max center</center_method>' in str(verf_result[0])
    assert '<center_method>fit center</center_method>' in str(verf_result[0])
    assert '<center_method>second derivative</center_method>' in str(verf_result[0])
    assert '<center_method>higher order derivative</center_method>' in str(verf_result[0])
    assert '<center_method>extrapolated</center_method>' in str(verf_result[0])
    assert '<center_method>calculated</center_method>' in str(verf_result[0])
    assert '<center_method>estimated</center_method>' in str(verf_result[0])
    assert '<center_method>various</center_method>' in str(verf_result[0])
    assert '<center_method>other</center_method>' in str(verf_result[0])
    assert '<center_method>unknown</center_method>' in str(verf_result[0])
    # position center
    assert '<center></center>' in str(verf_result[0])
    assert '<center>DA15</center>' in str(verf_result[0])
    assert '<center>DA16</center>' in str(verf_result[0])
    assert '<center>DA17</center>' in str(verf_result[0])
    assert '<center>DA18</center>' in str(verf_result[0])
    assert '<center>DA19</center>' in str(verf_result[0])
    assert '<center>DA20</center>' in str(verf_result[0])
    assert '<center>DA25</center>' in str(verf_result[0])
    assert '<center>DA26</center>' in str(verf_result[0])
    assert '<center>DA31</center>' in str(verf_result[0])
    assert '<center>DA32</center>' in str(verf_result[0])
    assert '<center>DA37</center>' in str(verf_result[0])
    assert '<center>DA38</center>' in str(verf_result[0])
    assert '<center>DA41</center>' in str(verf_result[0])
    assert '<center>DA45</center>' in str(verf_result[0])
    assert '<center>DA53</center>' in str(verf_result[0])
    # position center_error
    assert '<center_error></center_error>' in str(verf_result[0])
    assert '<center_error>DB15</center_error>' in str(verf_result[0])
    assert '<center_error>DB16</center_error>' in str(verf_result[0])
    assert '<center_error>DB17</center_error>' in str(verf_result[0])
    assert '<center_error>DB18</center_error>' in str(verf_result[0])
    assert '<center_error>DB19</center_error>' in str(verf_result[0])
    assert '<center_error>DB20</center_error>' in str(verf_result[0])
    assert '<center_error>DB25</center_error>' in str(verf_result[0])
    assert '<center_error>DB26</center_error>' in str(verf_result[0])
    assert '<center_error>DB31</center_error>' in str(verf_result[0])
    assert '<center_error>DB32</center_error>' in str(verf_result[0])
    assert '<center_error>DB37</center_error>' in str(verf_result[0])
    assert '<center_error>DB38</center_error>' in str(verf_result[0])
    assert '<center_error>DB41</center_error>' in str(verf_result[0])
    assert '<center_error>DB45</center_error>' in str(verf_result[0])
    assert '<center_error>DB53</center_error>' in str(verf_result[0])
    # position evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    # position comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>DD15</comments>' in str(verf_result[0])
    assert '<comments>DD16</comments>' in str(verf_result[0])
    assert '<comments>DD17</comments>' in str(verf_result[0])
    assert '<comments>DD18</comments>' in str(verf_result[0])
    assert '<comments>DD19</comments>' in str(verf_result[0])
    assert '<comments>DD20</comments>' in str(verf_result[0])
    assert '<comments>DD25</comments>' in str(verf_result[0])
    assert '<comments>DD26</comments>' in str(verf_result[0])
    assert '<comments>DD31</comments>' in str(verf_result[0])
    assert '<comments>DD32</comments>' in str(verf_result[0])
    assert '<comments>DD37</comments>' in str(verf_result[0])
    assert '<comments>DD38</comments>' in str(verf_result[0])
    assert '<comments>DD41</comments>' in str(verf_result[0])
    assert '<comments>DD45</comments>' in str(verf_result[0])
    assert '<comments>DD53</comments>' in str(verf_result[0])
    # <!-- BAND WIDTH -->
    # width method
    assert '<method></method>' in str(verf_result[0])
    assert '<method>fit fwhm</method>' in str(verf_result[0])
    assert '<method>hwhm</method>' in str(verf_result[0])
    assert '<method>first derivative</method>' in str(verf_result[0])
    assert '<method>extrapolated</method>' in str(verf_result[0])
    assert '<method>calculated</method>' in str(verf_result[0])
    assert '<method>estimated</method>' in str(verf_result[0])
    assert '<method>various</method>' in str(verf_result[0])
    assert '<method>other</method>' in str(verf_result[0])
    assert '<method>unknown</method>' in str(verf_result[0])
    assert '<method>NULL</method>' in str(verf_result[0])
    # width fwhm
    assert '<fwhm></fwhm>' in str(verf_result[0])
    assert '<fwhm>DH15</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH16</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH17</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH18</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH19</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH20</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH25</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH26</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH31</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH32</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH37</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH38</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH41</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH45</fwhm>' in str(verf_result[0])
    assert '<fwhm>DH53</fwhm>' in str(verf_result[0])
    # width fwhm_error
    assert '<fwhm_error></fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI15</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI16</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI17</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI18</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI19</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI20</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI25</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI26</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI31</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI32</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI37</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI38</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI41</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI45</fwhm_error>' in str(verf_result[0])
    assert '<fwhm_error>DI53</fwhm_error>' in str(verf_result[0])
    # width shape
    assert '<shape></shape>' in str(verf_result[0])
    assert '<shape>symmetric</shape>' in str(verf_result[0])
    assert '<shape>gaussian</shape>' in str(verf_result[0])
    assert '<shape>lorentzian</shape>' in str(verf_result[0])
    assert '<shape>voigt</shape>' in str(verf_result[0])
    assert '<shape>doppler</shape>' in str(verf_result[0])
    assert '<shape>asymmetric</shape>' in str(verf_result[0])
    assert '<shape>asymmetric low frequency wing</shape>' in str(verf_result[0])
    assert '<shape>asymmetric high frequency wing</shape>' in str(verf_result[0])
    assert '<shape>shoulder</shape>' in str(verf_result[0])
    assert '<shape>sharp shoulder</shape>' in str(verf_result[0])
    assert '<shape>broad shoulder</shape>' in str(verf_result[0])
    assert '<shape>low frequency tail</shape>' in str(verf_result[0])
    assert '<shape>undefined</shape>' in str(verf_result[0])
    # width asymmetry_factor
    assert '<asymmetry_factor></asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK15</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK16</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK17</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK18</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK19</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK20</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK25</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK26</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK31</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK32</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK37</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK38</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK41</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK45</asymmetry_factor>' in str(verf_result[0])
    assert '<asymmetry_factor>DK53</asymmetry_factor>' in str(verf_result[0])
    # width asymmetry_factor_error
    assert '<asymmetry_factor_error></asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL15</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL16</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL17</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL18</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL19</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL20</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL25</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL26</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL31</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL32</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL37</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL38</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL41</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL45</asymmetry_factor_error>' in str(verf_result[0])
    assert '<asymmetry_factor_error>DL53</asymmetry_factor_error>' in str(verf_result[0])
    # width evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # width comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>DN15</comments>' in str(verf_result[0])
    assert '<comments>DN16</comments>' in str(verf_result[0])
    assert '<comments>DN17</comments>' in str(verf_result[0])
    assert '<comments>DN18</comments>' in str(verf_result[0])
    assert '<comments>DN19</comments>' in str(verf_result[0])
    assert '<comments>DN20</comments>' in str(verf_result[0])
    assert '<comments>DN25</comments>' in str(verf_result[0])
    assert '<comments>DN26</comments>' in str(verf_result[0])
    assert '<comments>DN31</comments>' in str(verf_result[0])
    assert '<comments>DN32</comments>' in str(verf_result[0])
    assert '<comments>DN37</comments>' in str(verf_result[0])
    assert '<comments>DN38</comments>' in str(verf_result[0])
    assert '<comments>DN41</comments>' in str(verf_result[0])
    assert '<comments>DN45</comments>' in str(verf_result[0])
    assert '<comments>DN53</comments>' in str(verf_result[0])
    # <!-- BAND INTENSITY -->
    # peak_intensity method
    assert '<method></method>' in str(verf_result[0])
    assert '<method>baseline corrected peak intensity</method>' in str(verf_result[0])
    assert '<method>peak intensity</method>' in str(verf_result[0])
    assert '<method>fit intensity</method>' in str(verf_result[0])
    assert '<method>extrapolated</method>' in str(verf_result[0])
    assert '<method>calculated</method>' in str(verf_result[0])
    assert '<method>estimated</method>' in str(verf_result[0])
    assert '<method>various</method>' in str(verf_result[0])
    assert '<method>other</method>' in str(verf_result[0])
    assert '<method>unknown</method>' in str(verf_result[0])
    assert '<method>NULL</method>' in str(verf_result[0])
    # width abscoef
    assert '<abscoef></abscoef>' in str(verf_result[0])
    assert '<abscoef>DR15</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR16</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR17</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR18</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR19</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR20</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR25</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR26</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR31</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR32</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR37</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR38</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR41</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR45</abscoef>' in str(verf_result[0])
    assert '<abscoef>DR53</abscoef>' in str(verf_result[0])
    # width abscoef_error
    assert '<abscoef_error></abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS15</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS16</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS17</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS18</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS19</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS20</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS25</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS26</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS31</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS32</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS37</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS38</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS41</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS45</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>DS53</abscoef_error>' in str(verf_result[0])
    # width abscoef_specific
    assert '<abscoef_specific></abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT15</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT16</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT17</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT18</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT19</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT20</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT25</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT26</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT31</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT32</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT37</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT38</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT41</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT45</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>DT53</abscoef_specific>' in str(verf_result[0])
    # width abscoef_specific_error
    assert '<abscoef_specific_error></abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU15</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU16</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU17</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU18</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU19</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU20</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU25</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU26</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU31</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU32</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU37</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU38</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU41</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU45</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>DU53</abscoef_specific_error>' in str(verf_result[0])
    # width relative
    assert '<relative></relative>' in str(verf_result[0])
    assert '<relative>DV15</relative>' in str(verf_result[0])
    assert '<relative>DV16</relative>' in str(verf_result[0])
    assert '<relative>DV17</relative>' in str(verf_result[0])
    assert '<relative>DV18</relative>' in str(verf_result[0])
    assert '<relative>DV19</relative>' in str(verf_result[0])
    assert '<relative>DV20</relative>' in str(verf_result[0])
    assert '<relative>DV25</relative>' in str(verf_result[0])
    assert '<relative>DV26</relative>' in str(verf_result[0])
    assert '<relative>DV31</relative>' in str(verf_result[0])
    assert '<relative>DV32</relative>' in str(verf_result[0])
    assert '<relative>DV37</relative>' in str(verf_result[0])
    assert '<relative>DV38</relative>' in str(verf_result[0])
    assert '<relative>DV41</relative>' in str(verf_result[0])
    assert '<relative>DV45</relative>' in str(verf_result[0])
    assert '<relative>DV53</relative>' in str(verf_result[0])
    # width relative_error
    assert '<relative_error></relative_error>' in str(verf_result[0])
    assert '<relative_error>DW15</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW16</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW17</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW18</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW19</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW20</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW25</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW26</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW31</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW32</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW37</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW38</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW41</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW45</relative_error>' in str(verf_result[0])
    assert '<relative_error>DW53</relative_error>' in str(verf_result[0])
    # width strength
    assert '<strength></strength>' in str(verf_result[0])
    assert '<strength>ia</strength>' in str(verf_result[0])
    assert '<strength>ew</strength>' in str(verf_result[0])
    assert '<strength>vvw</strength>' in str(verf_result[0])
    assert '<strength>vw</strength>' in str(verf_result[0])
    assert '<strength>w</strength>' in str(verf_result[0])
    assert '<strength>m</strength>' in str(verf_result[0])
    assert '<strength>s</strength>' in str(verf_result[0])
    assert '<strength>vs</strength>' in str(verf_result[0])
    assert '<strength>vvs</strength>' in str(verf_result[0])
    assert '<strength>es</strength>' in str(verf_result[0])
    assert '<strength>unknown</strength>' in str(verf_result[0])
    assert '<strength>NULL</strength>' in str(verf_result[0])
    # width evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # width comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>EB15</comments>' in str(verf_result[0])
    assert '<comments>EB16</comments>' in str(verf_result[0])
    assert '<comments>EB17</comments>' in str(verf_result[0])
    assert '<comments>EB18</comments>' in str(verf_result[0])
    assert '<comments>EB19</comments>' in str(verf_result[0])
    assert '<comments>EB20</comments>' in str(verf_result[0])
    assert '<comments>EB25</comments>' in str(verf_result[0])
    assert '<comments>EB26</comments>' in str(verf_result[0])
    assert '<comments>EB31</comments>' in str(verf_result[0])
    assert '<comments>EB32</comments>' in str(verf_result[0])
    assert '<comments>EB37</comments>' in str(verf_result[0])
    assert '<comments>EB38</comments>' in str(verf_result[0])
    assert '<comments>EB41</comments>' in str(verf_result[0])
    assert '<comments>EB45</comments>' in str(verf_result[0])
    assert '<comments>EB53</comments>' in str(verf_result[0])
    # <!-- BAND INTEGRATED INTENSITY -->
    # peak_intensity method
    assert '<method></method>' in str(verf_result[0])
    assert '<method>band integrated intensity</method>' in str(verf_result[0])
    assert '<method>width x peak intensity</method>' in str(verf_result[0])
    assert '<method>fit integrated intensity</method>' in str(verf_result[0])
    assert '<method>extrapolated</method>' in str(verf_result[0])
    assert '<method>calculated</method>' in str(verf_result[0])
    assert '<method>estimated</method>' in str(verf_result[0])
    assert '<method>various</method>' in str(verf_result[0])
    assert '<method>other</method>' in str(verf_result[0])
    assert '<method>unknown</method>' in str(verf_result[0])
    assert '<method>NULL</method>' in str(verf_result[0])
    # width abscoef
    assert '<abscoef></abscoef>' in str(verf_result[0])
    assert '<abscoef>EF15</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF16</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF17</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF18</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF19</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF20</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF25</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF26</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF31</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF32</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF37</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF38</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF41</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF45</abscoef>' in str(verf_result[0])
    assert '<abscoef>EF53</abscoef>' in str(verf_result[0])
    # width abscoef_error
    assert '<abscoef_error></abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG15</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG16</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG17</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG18</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG19</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG20</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG25</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG26</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG31</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG32</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG37</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG38</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG41</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG45</abscoef_error>' in str(verf_result[0])
    assert '<abscoef_error>EG53</abscoef_error>' in str(verf_result[0])
    # width abscoef_specific
    assert '<abscoef_specific></abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH15</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH16</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH17</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH18</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH19</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH20</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH25</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH26</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH31</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH32</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH37</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH38</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH41</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH45</abscoef_specific>' in str(verf_result[0])
    assert '<abscoef_specific>EH53</abscoef_specific>' in str(verf_result[0])
    # width abscoef_specific_error
    assert '<abscoef_specific_error></abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI15</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI16</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI17</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI18</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI19</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI20</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI25</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI26</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI31</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI32</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI37</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI38</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI41</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI45</abscoef_specific_error>' in str(verf_result[0])
    assert '<abscoef_specific_error>EI53</abscoef_specific_error>' in str(verf_result[0])
    # width relative
    assert '<relative></relative>' in str(verf_result[0])
    assert '<relative>EJ15</relative>' in str(verf_result[0])
    assert '<relative>EJ16</relative>' in str(verf_result[0])
    assert '<relative>EJ17</relative>' in str(verf_result[0])
    assert '<relative>EJ18</relative>' in str(verf_result[0])
    assert '<relative>EJ19</relative>' in str(verf_result[0])
    assert '<relative>EJ20</relative>' in str(verf_result[0])
    assert '<relative>EJ25</relative>' in str(verf_result[0])
    assert '<relative>EJ26</relative>' in str(verf_result[0])
    assert '<relative>EJ31</relative>' in str(verf_result[0])
    assert '<relative>EJ32</relative>' in str(verf_result[0])
    assert '<relative>EJ37</relative>' in str(verf_result[0])
    assert '<relative>EJ38</relative>' in str(verf_result[0])
    assert '<relative>EJ41</relative>' in str(verf_result[0])
    assert '<relative>EJ45</relative>' in str(verf_result[0])
    assert '<relative>EJ53</relative>' in str(verf_result[0])
    # width relative_error
    assert '<relative_error></relative_error>' in str(verf_result[0])
    assert '<relative_error>EK15</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK16</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK17</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK18</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK19</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK20</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK25</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK26</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK31</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK32</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK37</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK38</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK41</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK45</relative_error>' in str(verf_result[0])
    assert '<relative_error>EK53</relative_error>' in str(verf_result[0])
    # width strength
    assert '<strength></strength>' in str(verf_result[0])
    assert '<strength>ia</strength>' in str(verf_result[0])
    assert '<strength>ew</strength>' in str(verf_result[0])
    assert '<strength>vvw</strength>' in str(verf_result[0])
    assert '<strength>vw</strength>' in str(verf_result[0])
    assert '<strength>w</strength>' in str(verf_result[0])
    assert '<strength>m</strength>' in str(verf_result[0])
    assert '<strength>s</strength>' in str(verf_result[0])
    assert '<strength>vs</strength>' in str(verf_result[0])
    assert '<strength>vvs</strength>' in str(verf_result[0])
    assert '<strength>es</strength>' in str(verf_result[0])
    assert '<strength>unknown</strength>' in str(verf_result[0])
    assert '<strength>NULL</strength>' in str(verf_result[0])
    # width evaluation
    assert '<evaluation></evaluation>' in str(verf_result[0])
    assert '<evaluation>undefined</evaluation>' in str(verf_result[0])
    assert '<evaluation>uncertain</evaluation>' in str(verf_result[0])
    assert '<evaluation>validated</evaluation>' in str(verf_result[0])
    assert '<evaluation>recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>with caution</evaluation>' in str(verf_result[0])
    assert '<evaluation>not recommended</evaluation>' in str(verf_result[0])
    assert '<evaluation>NULL</evaluation>' in str(verf_result[0])
    # width comments
    assert '<comments></comments>' in str(verf_result[0])
    assert '<comments>EP15</comments>' in str(verf_result[0])
    assert '<comments>EP16</comments>' in str(verf_result[0])
    assert '<comments>EP17</comments>' in str(verf_result[0])
    assert '<comments>EP18</comments>' in str(verf_result[0])
    assert '<comments>EP19</comments>' in str(verf_result[0])
    assert '<comments>EP20</comments>' in str(verf_result[0])
    assert '<comments>EP25</comments>' in str(verf_result[0])
    assert '<comments>EP26</comments>' in str(verf_result[0])
    assert '<comments>EP31</comments>' in str(verf_result[0])
    assert '<comments>EP32</comments>' in str(verf_result[0])
    assert '<comments>EP37</comments>' in str(verf_result[0])
    assert '<comments>EP38</comments>' in str(verf_result[0])
    assert '<comments>EP41</comments>' in str(verf_result[0])
    assert '<comments>EP45</comments>' in str(verf_result[0])
    assert '<comments>EP53</comments>' in str(verf_result[0])
    # <!-- BAND: BANDLIST PREVIEW -->
    # width bandlist_nominal_flag
    assert '<bandlist_nominal_flag></bandlist_nominal_flag>' in str(verf_result[0])
    assert '<bandlist_nominal_flag>yes</bandlist_nominal_flag>' in str(verf_result[0])
    assert '<bandlist_nominal_flag>no</bandlist_nominal_flag>' in str(verf_result[0])
    # no empty tags
    assert str(verf_result[0]).find('/>') == -1
    # qtys
    assert str(verf_result[0]).count("<characteristics>") == 3
    assert str(verf_result[0]).count("<characteristic>") == 16
    assert str(verf_result[0]).count("<constituent>") == 16 + 1
    assert str(verf_result[0]).count("<composition_comments>") == 16
    assert str(verf_result[0]).count("<texture_comments>") == 16
    assert str(verf_result[0]).count("<parameters_environment>") == 16
    assert str(verf_result[0]).count("<temperature>") == 16
    assert str(verf_result[0]).count("<pressure>") == 16
    assert str(verf_result[0]).count("<excitation>") == 16
    assert str(verf_result[0]).count("<methods>") == 16
    assert str(verf_result[0]).count("<fit_function>") == 23
    assert str(verf_result[0]).count("<parameters>") == 23
    assert str(verf_result[0]).count("<overlap>") == 16
    assert str(verf_result[0]).count("<position>") == 16
    assert str(verf_result[0]).count("<peak_method>") == 16
    assert str(verf_result[0]).count("<peak>") == 16
    assert str(verf_result[0]).count("<peak_error>") == 16
    assert str(verf_result[0]).count("<center_method>") == 16
    assert str(verf_result[0]).count("<width>") == 16
    assert str(verf_result[0]).count("<fwhm>") == 16
    assert str(verf_result[0]).count("<fwhm_error>") == 16
    assert str(verf_result[0]).count("<shape>") == 16
    assert str(verf_result[0]).count("<asymmetry_factor>") == 16
    assert str(verf_result[0]).count("<asymmetry_factor_error>") == 16
    assert str(verf_result[0]).count("<peak_intensity>") == 16
    assert str(verf_result[0]).count("<integrated_intensity>") == 16
    assert str(verf_result[0]).count("<abscoef>") == 16 * 2
    assert str(verf_result[0]).count("<abscoef_error>") == 16 * 2
    assert str(verf_result[0]).count("<abscoef_specific>") == 16 * 2
    assert str(verf_result[0]).count("<abscoef_specific_error>") == 16 * 2
    assert str(verf_result[0]).count("<relative>") == 16 * 2
    assert str(verf_result[0]).count("<relative_error>") == 16 * 2
    assert str(verf_result[0]).count("<strength>") == 16 * 2
    assert str(verf_result[0]).count("<bandlist_nominal_flag>") == 16


# Band Assignment
def test_fill_band_publication():
    # Raman
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_publication_ram.xlsx", "RAMAN")
    file_save(verf_result[0])
    # <!-- BAND: REFERENCES -->
    # publications
    assert '<publication_uid>NULL</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH15</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH16</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH17</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH18</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH19</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH20</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH23</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH21</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH27</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH29</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH31</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH34</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH36</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH33</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH37</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH39</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH40</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH41</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH42</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH48</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH52</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH54</publication_uid>' in str(verf_result[0])
    # data_publication_spectra
    assert '<spectrum_uid></spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ15</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ16</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ17</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ18</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ19</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ20</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ23</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ21</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ27</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ29</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ31</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ35</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ33</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ39</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ41</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ45</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ47</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ55</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ53</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ52</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ51</spectrum_uid>' in str(verf_result[0])
    # data_publication_links
    assert '<link></link>' in str(verf_result[0])
    assert '<link>BL15</link>' in str(verf_result[0])
    assert '<link>BL22</link>' in str(verf_result[0])
    assert '<link>BL30</link>' in str(verf_result[0])
    assert '<link>BL47</link>' in str(verf_result[0])
    assert '<link>BL44</link>' in str(verf_result[0])
    assert '<link>BL35</link>' in str(verf_result[0])
    # publication_comments
    assert '<publication_comments></publication_comments>' in str(verf_result[0])
    assert '<publication_comments>BM15</publication_comments>' in str(verf_result[0])
    # no empty tags
    assert str(verf_result[0]).find('/>') == -1
    # qtys
    assert str(verf_result[0]).count("<publications>") == 3
    assert str(verf_result[0]).count("<publication_uid>") == 23
    assert str(verf_result[0]).count("<data_publication_spectra>") == 3
    assert str(verf_result[0]).count("<spectrum_uid>") == 22
    assert str(verf_result[0]).count("<data_publication_links>") == 3
    assert str(verf_result[0]).count("<link>") == 7
    assert str(verf_result[0]).count("<publication_comments>") == 3
    # Abs
    verf_result = XMLGenerator_Bandlist_core.XML_filler("xlsx/fill/band_publication_abs.xlsx", "ABS")
    file_save(verf_result[0])
    # <!-- BAND: REFERENCES -->
    # publications
    assert '<publication_uid>NULL</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH15</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH16</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH17</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH18</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH19</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH20</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH23</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH21</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH27</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH29</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH31</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH34</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH36</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH33</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH37</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH39</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH40</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH41</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH42</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH48</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH52</publication_uid>' in str(verf_result[0])
    assert '<publication_uid>PUBLI_BH54</publication_uid>' in str(verf_result[0])
    # data_publication_spectra
    assert '<spectrum_uid></spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ15</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ16</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ17</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ18</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ19</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ20</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ23</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ21</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ27</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ29</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ31</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ35</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ33</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ39</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ41</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ45</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ47</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ55</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ53</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ52</spectrum_uid>' in str(verf_result[0])
    assert '<spectrum_uid>SPECTRUM_BJ51</spectrum_uid>' in str(verf_result[0])
    # data_publication_links
    assert '<link></link>' in str(verf_result[0])
    assert '<link>BL15</link>' in str(verf_result[0])
    assert '<link>BL22</link>' in str(verf_result[0])
    assert '<link>BL30</link>' in str(verf_result[0])
    assert '<link>BL47</link>' in str(verf_result[0])
    assert '<link>BL44</link>' in str(verf_result[0])
    assert '<link>BL35</link>' in str(verf_result[0])
    # publication_comments
    assert '<publication_comments></publication_comments>' in str(verf_result[0])
    assert '<publication_comments>BM15</publication_comments>' in str(verf_result[0])
    # no empty tags
    assert str(verf_result[0]).find('/>') == -1
    # qtys
    assert str(verf_result[0]).count("<publications>") == 3
    assert str(verf_result[0]).count("<publication_uid>") == 23
    assert str(verf_result[0]).count("<data_publication_spectra>") == 3
    assert str(verf_result[0]).count("<spectrum_uid>") == 22
    assert str(verf_result[0]).count("<data_publication_links>") == 3
    assert str(verf_result[0]).count("<link>") == 7
    assert str(verf_result[0]).count("<publication_comments>") == 3
